@inproceedings{Grossmann:2011:PFS:1950413.1950470,
 abstract = {Field-programmable gate arrays (FPGAs) are frequently used in low power systems because they can implement the same functionality as a microprocessor in a more energy-efficient manner while still offering the benefits of low development time and cost relative to an ASIC. Similar advantages for FPGAs may be found in ultra-low power applications operating at subthreshold supply voltages, where performance is sacrificed in favor of increased energy efficiency. Process technology research has demonstrated the benefits of tailoring device design to subthreshold operation. Subthreshold FPGA research is only beginning, and has yet to consider use of subthreshold-optimized devices. A simplified FPGA implemented in subthreshold-optimized CMOS is presented. The results obtained show that this technology provides the capability to implement an FPGA suitable for ultra-low power applications consuming tens to hundreds of microwatts of average power.},
 acmid = {1950470},
 address = {New York, NY, USA},
 author = {Grossmann, Peter and Leeser, Miriam},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950470},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, subthreshold},
 link = {http://doi.acm.org/10.1145/1950413.1950470},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {279--279},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A Prototype FPGA for Subthreshold-optimized CMOS (Abstract Only)},
 year = {2011}
}


@inproceedings{Lin:2011:UMA:1950413.1950474,
 abstract = {Truly unleashing the computing potential of FPGAs, as well as widening their applicability, demands alleviating cumbersome HDL programming and relieving laborious manual optimization. Towards this end, we propose a Many-core Approach to Reconfigurable Computing (MARC) that enables efficient high-performance computing for applications expressed with imperative programming languages such as C/C++ without constructing FPGA computing machines from scratch when targeting various applications within the same or similar problem domains. A MARC system achieves high computing performance by leveraging a many-core architectural template, sophisticated logic synthesizing techniques, and state-of-art compiler optimization technology. In addition, MARC exploits abundant special FPGA resources such as distributed block memories and DSP blocks to implement complete single-chip high efficiency many-core microarchitectures. The key benefits of MARC include (i) allowing programmers to easily express parallelism through a high-level programming language, (ii) supporting coarse-grain multithreading and dataflow-style fine-grain threading while permitting bit-level resource control, and (iii) greatly reducing the effort required to re-purpose the hardware system for different algorithms or different applications.},
 acmid = {1950474},
 address = {New York, NY, USA},
 author = {Lin, Mingjie and Cheng, Shaoyi and Wawrzynek, John},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950474},
 isbn = {978-1-4503-0554-9},
 keyword = {computing, fpga, many-core, template},
 link = {http://doi.acm.org/10.1145/1950413.1950474},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {281--281},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Using Many-core Architectural Templates for FPGA-based Computing (Abstract Only)},
 year = {2011}
}


@inproceedings{Lombardo:2011:AET:1950413.1950464,
 abstract = {A traffic monitor system has been implemented on the NetFPGA. The NetFPGA is an open networking platform accelerator that enables researchers and instructors to build working prototypes of high-speed, hardware-accelerated networking systems. The traffic monitor application allows network packets to be captured and analyzed from up to all four of the Gigabit Ethernet ports. A graphical user interface showing the traffic of any port has been implemented on top of it. The project has been implemented as a fully open-source project and serves as an exemplar project on how to build and distribute NetFPGA applications. All the code (Verilog, hardware, system software, verification scripts, makefiles, and support tools) can be freely downloaded from the NetFPGA.org website. System performance has been compared with other two implementations: one using the same NetFPGA architecture but implementing the reference router with port mirroring, and the other being a software implementation built on top of the Click Modular Router.},
 acmid = {1950464},
 address = {New York, NY, USA},
 author = {Lombardo, Alfio and Reforgiato, Diego and Schembra, Giovanni},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950464},
 isbn = {978-1-4503-0554-9},
 keyword = {click modular router, netfpga, packet sniffer, port mirroring, traffic monitor},
 link = {http://doi.acm.org/10.1145/1950413.1950464},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {277--277},
 publisher = {ACM},
 series = {FPGA '11},
 title = {An Accelerated and Energy-efficient Traffic Monitor Using the NetFPGA (Abstract Only)},
 year = {2011}
}


@inproceedings{Tavaragiri:2011:EFI:1950413.1950455,
 abstract = {The programmable interconnection resources are one aspect that distinguishes FPGAs from other devices. The abundance of these resources in modern devices almost always assures us that the most complex design can be routed. This underutilized resource can be used for other unintended purposes. One such use, explored here, is to concatenate large networks together to form pseudo-equipotential geometric shapes. These shapes can then be evaluated in terms of their ability to radiate (modulated) energy off the chip to a nearby receiver. In this paper, an unconventional method of building such transmitters on an FPGA is proposed. Arbitrary shaped antennas are created using a unique flow involving an experimental router and binary images. An experiment setup is used to measure the performance of the antennas created.},
 acmid = {1950455},
 address = {New York, NY, USA},
 author = {Tavaragiri, Abhay and Couch, Jacob and Athanas, Peter},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950455},
 isbn = {978-1-4503-0554-9},
 keyword = {antenna design, embedded transceivers, geometric routing, hidden transmitter},
 link = {http://doi.acm.org/10.1145/1950413.1950455},
 location = {Monterey, CA, USA},
 numpages = {8},
 pages = {219--226},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Exploration of FPGA Interconnect for the Design of Unconventional Antennas},
 year = {2011}
}


@inproceedings{OmidianSavarbaghi:2011:FPG:1950413.1950483,
 abstract = {FPGA placement and routing are still challenging problems. Given the increased diversity of logic and routing resources on FPGA chips, it seems appropriate to tackle the placement problem as a mapping between the nodes and edges in a circuit graph to compatible resources in the architecture graph. We explore utilizing graph isomorphism algorithms to perform FPGA placement. We use a hierarchical approach in which the circuit and architecture graphs are simultaneously clustered to reduce the size of the search space, and then a novel reductive graph product method is used to solve the isomorphism problem. The graph product algorithm is called reductive as it eliminates a linear number of candidates at every step of the search process, reducing the number of candidate nodes by approximately 1/3. Compared to the annealing-based placement tool VPR 5.0, we achieve approximately 40% improvement in placement runtime, while improving the critical path delay by about 7% and wire length by 5%, while demanding 1.3% more channels on average.},
 acmid = {1950483},
 address = {New York, NY, USA},
 author = {Omidian Savarbaghi, Hossein and Bazargan, Kia},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950483},
 isbn = {978-1-4503-0554-9},
 keyword = {clustering, graph isomorphism, graph product, placement},
 link = {http://doi.acm.org/10.1145/1950413.1950483},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {284--284},
 publisher = {ACM},
 series = {FPGA '11},
 title = {FPGA Placement by Graph Isomorphism (Abstract Only)},
 year = {2011}
}


@inproceedings{VanEssen:2011:ESF:1950413.1950436,
 abstract = {Functional units provide the backbone of any spatial accelerator by providing the computing resources. The desire for having rich and expensive functional units is in tension with producing a regular and energy-efficient computing fabric. This paper explores the design trade-off between complex, universal functional units and simpler, limited functional units. We show that a modest amount of specialization reduces the area-delay-energy product of an optimized architecture to 0.86Ã— a baseline architecture. Furthermore, we provide a design guideline that allows an architect to customize the contents of the computing fabric just by examining the profile of benchmarks within the application domains.},
 acmid = {1950436},
 address = {New York, NY, USA},
 author = {Van Essen, Brian C. and Panda, Robin and Wood, Aaron and Ebeling, Carl and Hauck, Scott},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950436},
 isbn = {978-1-4503-0554-9},
 keyword = {architecture, cgra, energy-efficiency, functional units},
 link = {http://doi.acm.org/10.1145/1950413.1950436},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {107--110},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Energy-efficient Specialization of Functional Units in a Coarse-grained Reconfigurable Array},
 year = {2011}
}


@inproceedings{vanHaastregt:2011:HLS:1950413.1950468,
 abstract = {During the 1990s, High Level Synthesis (HLS) slowly started emerging to allow designers to cope with the ever-increasing complexity of digital signal processing systems such as wireless receivers. Only recently, a new generation of high-quality commercial HLS tools capable of generating decent RTL architectures from algorithmic-style code has become available. Although these tools are now starting to be adopted for actual designs, detailed experiences and results for these tools in significant designs is still lacking. In this work we have analyzed the design process of a significant portion of a wireless communication application using AutoESL's AutoPilot HLS tool. We target a Xilinx Virtex-5 FPGA device and a clock frequency of 225 MHz. We have compared our HLS implementation to a reference implementation obtained using manual RTL design methods. We found that our HLS implementation is competitive to this reference implementation in terms of throughput and resource cost. The time needed to obtain a first HLS implementation matching throughput and resource cost aspects of the reference implementation is similar to the design time of the reference implementation. After obtaining a first HLS implementation, we were able to explore and implement different application architectures with HLS in only a couple of hours, thereby gaining significant savings in design time over manual RTL design, where architectural exploration may take weeks.},
 acmid = {1950468},
 address = {New York, NY, USA},
 author = {van Haastregt, Sven and Neuendorffer, Stephen and Vissers, Kees and Kienhuis, Bart},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950468},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, high level synthesis, sphere decoder},
 link = {http://doi.acm.org/10.1145/1950413.1950468},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {278--278},
 publisher = {ACM},
 series = {FPGA '11},
 title = {High Level Synthesis for FPGAs Applied to a Sphere Decoder Channel Preprocessor (Abstract Only)},
 year = {2011}
}


@inproceedings{Luu:2011:ADP:1950413.1950457,
 abstract = {The development of future FPGA fabrics with more sophisticated and complex logic blocks requires a new CAD flow that permits the expression of that complexity and the ability to synthesize to it. In this paper, we present a new logic block description language that can depict complex intra-block interconnect, hierarchy and modes of operation. These features are necessary to support modern and future FPGA complex soft logic blocks, memory and hard blocks. The key part of the CAD flow associated with this complexity is the packer, which takes the logical atomic pieces of the complex blocks and groups them into whole physical entities. We present an area-driven generic packing tool that can pack the logical atoms into any heterogeneous FPGA described in the new language, including many different kinds of soft and hard logic blocks. We gauge its area quality by comparing the results achieved with a lower bound on the number of blocks required, and then illustrate its explorative capability in two ways: on fracturable LUT soft logic architectures, and on hard block memory architectures. The new infrastructure attaches to a flow that begins with a Verilog front-end, permitting the use of benchmarks that are significantly larger than the usual ones, and can target heterogenous FPGAs.},
 acmid = {1950457},
 address = {New York, NY, USA},
 author = {Luu, Jason and Anderson, Jason Helge and Rose, Jonathan Scott},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950457},
 isbn = {978-1-4503-0554-9},
 keyword = {architecture description language, clustering, complex block, configurable memory, configurable multiplier, fpga, hard logic cluster, logic block, logic cluster, packing, soft logic cluster, splitting},
 link = {http://doi.acm.org/10.1145/1950413.1950457},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {227--236},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Architecture Description and Packing for Logic Blocks with Hierarchy, Modes and Complex Interconnect},
 year = {2011}
}


@inproceedings{Levine:2011:HML:1950413.1950482,
 abstract = {Literature suggests that timing performance degradation in VLSI could be a major concern in future process technologies. FPGAs are well suited to cope with this challenge, due to their flexibility at design-, manufacture- and run-time. Existing timing measurement techniques allow for the measurement of delay while the circuit is not operating, and reliability techniques allow for the detection of faults as they occur in operating circuits. Neither allows for the health of an operating circuit to be measured. The ability to monitor the health of a system can provide an early warning of impending failure. This information will enable measures to reduce the impact of, or avoid altogether, the failure. A good indication of the degree of degradation in an operating circuit is the available timing slack in a combinatorial circuit path, between registers, while the circuit is operating at speed. This work proposes a new time delay measurement technique that does not interfere with the circuit's normal operation. This is achieved by sweeping the phase of a secondary clock signal, driving additional shadow registers. These are connected to each circuit node to be measured, typically those on the most critical paths. The technique is able to measure the timing slack available in the circuit-under-test, while it is performing its usual function. The technique is demonstrated using a 12-stage LUT chain, and on an 8-bit ripple-carry adder, implemented on an Altera Cyclone III FPGA. It is able to measure the timing slack with a best case resolution of 96ps. The additional circuitry has minimal overhead in terms of area, power consumption, and timing. The increase in circuit delay due to extra fan-out load was measured to be 0.25% in the first example circuit.},
 acmid = {1950482},
 address = {New York, NY, USA},
 author = {Levine, Joshua M. and Stott, Edward and Constantinides, George A. and Cheung, Peter Y.K.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950482},
 isbn = {978-1-4503-0554-9},
 keyword = {degradation, fpga, health monitor, self test},
 link = {http://doi.acm.org/10.1145/1950413.1950482},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {284--284},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Health Monitoring of Live Circuits in FPGAs Based on Time Delay Measurement (Abstract Only)},
 year = {2011}
}


@inproceedings{Schinke:2011:LPI:1950413.1950465,
 abstract = {New architectures for the switch box and connection block are proposed for use in an energy efficient field programmable gate array (FPGA) with bidirectional wiring. Power-hungry SRAMs are replaced by non-volatile nanocrystal floating gate (NCFG) devices that retain their state while the system power is off and do not need to be configured at boot up. The NCFG-based FPGA is benchmarked against both a traditional bidirectional and a modern unidirectional SRAM-based FPGA using a 32-tap FIR Filter designed in HSPICE based on predictive BSIM4.0 CMOS with 45nm gate length technology and a previously developed physical model of the NCFG device. Compared to the traditional bidirectional and the modern unidirectional SRAM-based interconnect the total gate area is reduced by 87% and 63%, respectively. Simulations demonstrate a reduction of 58% in static and 34% in dynamic power consumption compared to the traditional bidirectional SRAM-based FPGA while the signal propagation delay through a switch box is decreased by 28%. When compared to the modern unidirectional SRAM-based FPGA the proposed design has roughly comparable power consumption but the circuit complexity is greatly reduced as a result of doubling the available routing channels. Alternatively the number of the routing channels may be reduced to save area and power whereas the complexity remains similar. The potential benefits from choosing the proposed design can be summarized as small area, low power consumption, high speed and high functionality, which typically trade off and cannot be achieved by the SRAM-based counterparts simultaneously. Compared to previous designs that use continuous floating gate devices in FPGAs, the approach described in this work requires less overhead, lower voltages, and offers improved reliability.},
 acmid = {1950465},
 address = {New York, NY, USA},
 author = {Schinke, Daniel and Pitts, Wallace Shep and Di Spigna, Neil and Franzon, Paul},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950465},
 isbn = {978-1-4503-0554-9},
 keyword = {bidirectional wiring, connection block, floating gate, fpga, high speed, low power, nanocrystal, switch box},
 link = {http://doi.acm.org/10.1145/1950413.1950465},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {277--277},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Low Power Interconnect Design for Fpgas with Bidirectional Wiring Using Nanocrystal Floating Gate Devices (Abstract Only)},
 year = {2011}
}


@inproceedings{Greene:2011:FFF:1950413.1950434,
 abstract = {This paper describes a non-volatile reprogrammable FPGA fabric, whose configuration data are provided directly by flash memory. The fabric is optimized for low-cost, low-power applications, leveraging the density of flash and the elimination of conventional configuration SRAM and its attendant static power. After surveying the necessary background on flash and its application to FPGAs, the 1T flash cell is described along with relevant novel aspects of the fabric architecture. The addition of a third level of switching between inter-cluster signals and logic inputs helps to reduce area and raise typical utilization above 95%. Despite the longer signal path, performance is maintained by synergism between the improved routing flexibility and extreme minimization of the fastest LUT input delay. Test cost is reduced by built-in circuits that can test all switches without reprogramming the flash memory. The fabric has been implemented in a 65nm CMOS embedded flash process.},
 acmid = {1950434},
 address = {New York, NY, USA},
 author = {Greene, Jonathan and Kaptanoglu, Sinan and Feng, Wenyi and Hecht, Volker and Landry, Joel and Li, Fei and Krouglyanskiy, Anton and Morosan, Mihai and Pevzner, Val},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950434},
 isbn = {978-1-4503-0554-9},
 keyword = {built-in self test, clos network, flash memory, fpga architecture, iib, input interconnection block, packing, programmable routing},
 link = {http://doi.acm.org/10.1145/1950413.1950434},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {87--96},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A 65Nm Flash-based FPGA Fabric Optimized for Low Cost and Power},
 year = {2011}
}


@inproceedings{Bui:2011:BBF:1950413.1950487,
 abstract = {There are many pattern matching engines in Network Intrusion Detection Systems (NIDS) have been developed on FPGA-based platforms to accelerates the performance of pattern matching process in order to keep up with the gradually increasing in speed of current networks. However, those systems only support small number of short patterns which are not appropriate to large database such as Clam Antivirus patterns. In this paper, we propose Bloom-Bloomier Filter Extension (BBFex) as a practical pattern matching engine that handles large various-length pattern database. The basic idea in designing BBFex is the combination of Bloom Filter and Bloomier Filter to index patterns and an efficient pattern fragmenting method to split and to merge long patterns. Therefore, BBFex can recognize nearly 84,000 Clam Antivirus static patterns of which lengths vary from 4 to 255 characters with rather low on chip memory density, approximately 0.4 bits per character while keeping the off-chip memory access rate 5X lower compared to previous similar system and achieving throughput of 1.36 Gbps. In addition, BBFex is not only limited to Clam Antivirus database because its architecture is designed in respect to general character-based database. Moreover, as a hash-based system, BBFex does not require entire system reconfiguration when updating database.},
 acmid = {1950487},
 address = {New York, NY, USA},
 author = {Bui, Trung Hieu and Nguyen, Duy Anh Tuan and Tran, Ngoc Thinh},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950487},
 isbn = {978-1-4503-0554-9},
 keyword = {bloom filter, bloomier filter, clam antivirus, hashing, long pattern, pattern matching},
 link = {http://doi.acm.org/10.1145/1950413.1950487},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {285--285},
 publisher = {ACM},
 series = {FPGA '11},
 title = {BBFEX: A Bloom-bloomier Filter Extension for Long Patterns in FPGA-based Pattern Matching System (Abstract Only)},
 year = {2011}
}


@inproceedings{Koch:2011:FHP:1950413.1950427,
 abstract = {This paper analyses different hardware sorting architectures in order to implement a highly scaleable sorter for solving huge problems at high performance up to the GB range in linear time complexity. It will be proven that a combination of a FIFO-based merge sorter and a tree-based merge sorter results in the best performance at low cost. Moreover, we will demonstrate how partial run-time reconfiguration can be used for saving almost half the FPGA resources or alternatively for improving the speed. Experiments show a sustainable sorting throughput of 2GB/s for problems fitting into the on-chip FPGA memory and 1 GB/s when using external memory. These values surpass the best published results on large problem sorting implementations on FPGAs, GPUs, and the Cell processor.},
 acmid = {1950427},
 address = {New York, NY, USA},
 author = {Koch, Dirk and Torresen, Jim},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950427},
 isbn = {978-1-4503-0554-9},
 keyword = {database, fpga, partial reconfiguration, sorting},
 link = {http://doi.acm.org/10.1145/1950413.1950427},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {45--54},
 publisher = {ACM},
 series = {FPGA '11},
 title = {FPGASort: A High Performance Sorting Architecture Exploiting Run-time Reconfiguration on Fpgas for Large Problem Sorting},
 year = {2011}
}


@inproceedings{Chen:2011:RFR:1950413.1950484,
 abstract = {In the sub-wavelength regime, design for manufacturability (DFM) becomes increasingly important for field programmable gate arrays (FPGAs). In this paper, we report an automated tile generation flow targeting micro-regular fabric, this flow automatically generate the basic FPGA tile building block in a standard cell format and then form the whole tile with the help of commercial placing and routing tools. Using a publicly accessible, well-documented academic FPGA as case study, we found that comparing to the tile generators previously reported, our generated micro-regular tile incurs less than 10% area overhead, which could be potentially recovered by process window optimization thanks to its superior printability. In addition, we demonstrate that on 45nm technology, the generated FPGA tile reduces lithography induced process variation by 33%; and reduce probability of failure by 21.2%. If further overhead of 10% area can be recovered by enhanced resolution, we can achieve the variation reduction of 93.8% and reduce probability of failure by 16.2%.},
 acmid = {1950484},
 address = {New York, NY, USA},
 author = {Chen, Xun and Zhu, Jianwen},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950484},
 isbn = {978-1-4503-0554-9},
 keyword = {design for manufacturability, fpga, layout atutomation, regular design fabric},
 link = {http://doi.acm.org/10.1145/1950413.1950484},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {284--284},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Regular Fabric for Regular FPGA (Abstract Only)},
 year = {2011}
}


@inproceedings{Sun:2011:FSR:1950413.1950462,
 abstract = {The popularity of FPGAs is rapidly growing due to the unique advantages that they offer. However, their distinctive features also raise new questions concerning the security and communication capabilities of an FPGA-based hardware platform. In this paper, we explore the some of the limits of FPGA side-channel communication. Specifically, we identify a previously unexplored capability that significantly increases both the potential benefits and risks associated with side-channel communication on an FPGA: an in-device receiver. We designed and implemented three new communication mechanisms: speed modulation, timing modulation and pin hijacking. These non-traditional interfacing techniques have the potential to provide reliable communication with an estimated maximum bandwidth of 3.3 bit/sec, 8 Kbits/sec, and 3.4 Mbits/sec, respectively.},
 acmid = {1950462},
 address = {New York, NY, USA},
 author = {Sun, Ji and Bittner, Ray and Eguro, Ken},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950462},
 isbn = {978-1-4503-0554-9},
 keyword = {ddr2, fpga, i2c, phase shift, side-channel receiver, thermal},
 link = {http://doi.acm.org/10.1145/1950413.1950462},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {267--276},
 publisher = {ACM},
 series = {FPGA '11},
 title = {FPGA Side-channel Receivers},
 year = {2011}
}


@inproceedings{Liu:2011:ASD:1950413.1950424,
 abstract = {Traditional FPGA-based system-on-chip (SoC) design in general is accomplished via separate software and hardware design flows. With such a separate design methodology, extra development overhead has to be paid to meet the final system's performance, size and power consumption requirements. To overcome this development overhead which usually leads to significant increase of the time-to-market, a unified and efficient SoC design flow is needed. The current work addresses this problem via a SoC design flow which allows automatic building of a complete autonomous system on an FPGA in accordance with the need of a specific application. In the proposed design flow the architecture of the generated hardware is tailored to match the parallelism granularity and communication structure of the application. This, in turn, allows the application developer to meet the system's performance, size and power consumption requirements with a short time-to-market. To prove the applicability of the proposed approach, a monitor for real-time electrocardiographic (ECG) signal analysis and a motion detection algorithm have been implemented.},
 acmid = {1950424},
 address = {New York, NY, USA},
 author = {Liu, Ling and Morozov, Oleksii and Han, Yuxing and Gutknecht, J\"{u}rg and Hunziker, Patrick},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950424},
 isbn = {978-1-4503-0554-9},
 keyword = {automatic design flow, fpga, many-core architecture, software-hardware co-design},
 link = {http://doi.acm.org/10.1145/1950413.1950424},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {37--40},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Automatic SoC Design Flow on Many-core Processors: A Software Hardware Co-design Approach for FPGAs},
 year = {2011}
}


@inproceedings{Low:2011:VTA:1950413.1950477,
 abstract = {This paper describes the realization of an interconnect Delay Insensitive (DI) FPGA architecture with distributed asynchronous control. This architecture maintains the basic block structure of traditional FPGAs allowing the potential use of existing FPGA design tools in block design. This asynchronous FPGA architecture is mainly aimed at tolerating the unpredictable delay variations caused by process and environment variations in current and future VLSI technology nodes and also targets low power operations, including modes such as dynamic voltage scaling and variable Vdd, as in applications featuring energy harvesting. This is achieved by making the longer inter-block interconnects DI, keeping the computational logic single-rail, and removing global clocks.},
 acmid = {1950477},
 address = {New York, NY, USA},
 author = {Low, Hock Soon and Shang, DeLong and Xia, Fei and Yakovlev, Alex},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950477},
 isbn = {978-1-4503-0554-9},
 keyword = {asynchronous, distributed control, fpga, process variation, variability},
 link = {http://doi.acm.org/10.1145/1950413.1950477},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {282--282},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Variation Tolerant Asynchronous FPGA (Abstract Only)},
 year = {2011}
}


@inproceedings{Trimberger:2011:AEF:1950413.1950432,
 abstract = {FPGA bitstream encryption blocks theft of the design in the FPGA bitstream by preventing unauthorized copy and reverse engineering. By itself, encryption does not protect against tampering with the bitstream, so without additional capabilities, bitstream encryption cannot prevent the FPGA from executing an unauthorized bitstream. An unauthorized bitstream might be generated by trial and error to cause the FPGA to leak confidential data, including the decrypted bitstream. Strong authentication detects tampering with the bitstream, providing a root of trust that enables applications that require protection of sensitive data in a hostile environment. This paper describes the SHA HMAC-based bitstream authentication algorithm and protocol in Virtex-6 FPGAs and shows how they are integrated in the bitstream.},
 acmid = {1950432},
 address = {New York, NY, USA},
 author = {Trimberger, Stephen and Moore, Jason and Lu, Weiguang},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950432},
 isbn = {978-1-4503-0554-9},
 keyword = {authentication, fpga bitstream encryption, self-reconfiguration, trust, trusted design},
 link = {http://doi.acm.org/10.1145/1950413.1950432},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {83--86},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Authenticated Encryption for FPGA Bitstreams},
 year = {2011}
}


@inproceedings{Nowroz:2011:TPC:1950413.1950437,
 abstract = {In this paper we propose new techniques for thermal and power characterization of Field Programmable Gate Arrays (FPGAs) using infrared imaging techniques. For thermal characterization, we capture the thermal emissions from the backside of an FPGA chip during operation. We analyze the captured emissions and quantify the extent of thermal gradients and hot spots in FPGAs. Given that FPGAs are fabricated with no knowledge of the potential field designs, we propose soft sensing techniques that can combine the measurements of hard sensors to accurately estimate the temperatures where no sensors are embedded. For power characterization, we propose algorithmic techniques to invert the thermal emissions from FPGAs into spatial power estimates. We demonstrate how this technique can be used to produce spatial power maps of soft processors during operation.},
 acmid = {1950437},
 address = {New York, NY, USA},
 author = {Nowroz, Abdullah Nazma and Reda, Sherief},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950437},
 isbn = {978-1-4503-0554-9},
 keyword = {power mapping, sensors, thermal characterization},
 link = {http://doi.acm.org/10.1145/1950413.1950437},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {111--114},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Thermal and Power Characterization of Field-programmable Gate Arrays},
 year = {2011}
}


@inproceedings{Obeidat:2011:MAF:1950413.1950479,
 abstract = {Monitoring the functional behavior of an application is an important capability that assists in exploring the performance of a target application against different SW/HW implementations. Recently, there have been efforts to exploit the ability to trace the internal signals of the soft-core processors for developing FPGA-based profiling tools to monitor programs running on these processors. However, these previously developed techniques are application-dependent, i.e., they require the designer either to edit the HDL code or the application code to obtain the desired trace information when targeting new applications. In this research, we propose an application-independent profiling technique using the MicroBlaze/FPGA platform where profiling library or user-defined functions can be achieved by tracing the unique instruction flow that distinguishes functions from each other rather than monitoring the program counter value (the addresses of the functions). Hence, modifying the application code or targeting new application does not require reconfiguring the FPGA or modifying the application code for targeting the same functions. This technique can be used to analyze the target application at the source code level, observing the dominant operations and demanded resources that characterize the system behavior. In addition, this technique can assist in selecting the appropriate processor architecture for a given application by considering MicroBlaze as a reference architecture from which the functional behavior of the target application can be mapped to the performance of other architectures.},
 acmid = {1950479},
 address = {New York, NY, USA},
 author = {Obeidat, Fadi and Klenke, Robert},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950479},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga-based profiling, hw/sw codesign, performance modeling},
 link = {http://doi.acm.org/10.1145/1950413.1950479},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {283--283},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Microblaze: An Application-independent Fpga-based Profiler (Abstract Only)},
 year = {2011}
}


@inproceedings{Fletcher:2011:BGE:1950413.1950439,
 abstract = {This paper compares an implementation of a Bayesian inference algorithm across several FPGAs and GPGPUs, while embracing both the execution model and high-level architecture of a GPGPU. Our study is motivated by recent work in template-based programming and architectural models for FPGA computing. The comparison we present is meant to demonstrate the FPGA's potential, while constraining the design to follow the microarchitectural template of more programmable devices such as GPGPUs. The FPGA implementation proves capable of matching the performance of a high-end Nvidia Fermi-based GPU - the most advanced GPGPU available to us at the time of this study. Further investigation shows that each FPGA core outperforms workstation GPGPU cores by a factor of ~ 3.14x, and mobile GPGPU cores by ~ 4.25x despite a ~ 4x reduction in core clock frequency. Using these observations, we discuss the efficiency gap between these two platforms, and the challenges associated with template-based programming models.},
 acmid = {1950439},
 address = {New York, NY, USA},
 author = {Fletcher, Christopher W. and Lebedev, Ilia A. and Asadi, Narges B. and Burke, Daniel R. and Wawrzynek, John},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950439},
 isbn = {978-1-4503-0554-9},
 keyword = {bayesian networks, fpga, gpgpu, opencl, reconfigurable computing},
 link = {http://doi.acm.org/10.1145/1950413.1950439},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {119--122},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Bridging the GPGPU-FPGA Efficiency Gap},
 year = {2011}
}


@inproceedings{Kestur:2011:SFI:1950413.1950473,
 abstract = {Oriented filters are used in many early vision and image processing tasks for feature extraction at arbitrary orientations. Steerable filters are a class of filters in which a filter of arbitrary orientation is synthesized as a linear combination of a set of basis filters. In this work, we describe a streaming implementation of a steerable filter on FPGAs, which includes a two-dimensional convolution filter and a modulator for modulation by a set of oriented sine waves. We present a highly configurable streaming 2D convolution implementation and a novel separable look-up-table based implementation of the modulation step. This steerable filter has been extended to multiple resolutions to realize a steerable pyramid filter. Experimental results on a Virtex6 FPGA show that the steerable pyramid filter provides up to 14X and 21X speedups over related FPGA and CPU implementations respectively. This work was supported in part by a grant from NSF 0916887 and DARPA Neovision2 programs.},
 acmid = {1950473},
 address = {New York, NY, USA},
 author = {Kestur, Srinidhi and Dantara, Dharav and Narayanan, Vijaykrishnan},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950473},
 isbn = {978-1-4503-0554-9},
 keyword = {convolution, fpga implementation, gabor filter, ml605, modulation, pyramid filter, steerable filter},
 link = {http://doi.acm.org/10.1145/1950413.1950473},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {281--281},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A Streaming FPGA Implementation of a Steerable Filter for Real-time Applications (Abstract Only)},
 year = {2011}
}


@inproceedings{Papenfuss:2011:PHL:1950413.1950430,
 abstract = {For high-end industrial image processing applications with real-time requirements, FPGAs are often used as custom accelerators. High level synthesis tools, such as CatapultC, provide a compelling means of speeding up the algorithmic hardware design. However, increasing image resolutions make it ever more difficult to obtain sufficient throughput from external SDRAM frame buffers while providing simple, low-latency memory resources for the data path. To address these issues, this paper proposes a platform-based design with a custom memory system of buffers, caches and an optimized commercial memory controller that improves available SDRAM bandwidth by up to 4x. This greatly facilitates the high level synthesis flow, which is demonstrated by implementing two memory-intensive algorithms using 47.0 Gbit/s and 5.7 Gbit/s of on-chip and off-chip memory bandwidth respectively.},
 acmid = {1950430},
 address = {New York, NY, USA},
 author = {Papenfuss, Tim and Michel, Holger},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950430},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, high level synthesis, image processing, sdram},
 link = {http://doi.acm.org/10.1145/1950413.1950430},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {75--78},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A Platform for High Level Synthesis of Memory-intensive Image Processing Algorithms},
 year = {2011}
}


@inproceedings{Kenter:2011:PEF:1950413.1950448,
 abstract = {In this paper we present a fast and fully automated approach for studying the design space when interfacing reconfigurable accelerators with a CPU. Our challenge is, that a reasonable evaluation of architecture parameters requires a hardware/software partitioning that makes best use of each given architecture configuration. Therefore we developed a framework based on the LLVM infrastructure that performs this partitioning with high-level estimation of the runtime on the target architecture utilizing profiling information and code analysis. By making use of program characteristics also during the partitioning process, we improve previous results for various benchmarks and especially for growing interface latencies between CPU and accelerator.},
 acmid = {1950448},
 address = {New York, NY, USA},
 author = {Kenter, Tobias and Plessl, Christian and Platzner, Marco and Kauschke, Michael},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950448},
 isbn = {978-1-4503-0554-9},
 keyword = {design space exploration, hardware/software partitioning, llvm, performance estimation},
 link = {http://doi.acm.org/10.1145/1950413.1950448},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {177--180},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Performance Estimation Framework for Automated Exploration of CPU-accelerator Architectures},
 year = {2011}
}


@inproceedings{Lo:2011:BMV:1950413.1950452,
 abstract = {Several FPGA architectures exist for accelerating Restricted Boltzmann Machines (RBMs). However, the network size for most is limited by the amount of available on-chip memory. Therefore, many FPGAs are required to implement very large networks for use in real-world applications. A virtualized design is able to time-multiplex the hardware resources and handle much larger networks but suffers a performance penalty due to the context switch. In this paper, we present a number of improvements to a virtualized FPGA architecture for RBMs. First, we take advantage of 16-bit arithmetic to pack larger networks onto a chip. Second, a custom DMA engine is designed to reduce the performance impact of the large amount of memory transactions. Finally, the architecture is scaled to multiple FPGAs to gain additional performance through coarse grain parallelism. The design effort required to implement these changes is minimized through the use of an embedded MPI framework. The architecture, tested on a Berkeley Emulation Engine 3 platform running at 100 Mhz, achieves a speed of 12.563 GCUPS on a 8192x8192 network.},
 acmid = {1950452},
 address = {New York, NY, USA},
 author = {Lo, Charles and Chow, Paul},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950452},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, high performance computing, neural network hardware, restricted boltzmann machines},
 link = {http://doi.acm.org/10.1145/1950413.1950452},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {189--198},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Building a multi-FPGA Virtualized Restricted Boltzmann Machine Architecture Using Embedded MPI},
 year = {2011}
}


@inproceedings{Hagiescu:2011:CFA:1950413.1950459,
 abstract = {The constant push for feature richness in mobile and embedded devices has significantly increased computational demand. However, stringent energy constraints typically remain in place. Embedding processor cores in FPGAs offers a path to having customized instruction processors that can meet the performance and energy demands. Ideally, the customization process should be automated to reduce the design effort, and indirectly the time to market. However, the automatic generation of custom extensions for floating point computation remains a challenge in FPGA co-design. We propose an approach for accelerating such computation via application-specific SIMD extensions. We describe an automated co-design toolchain that generates code and application-specific platform extensions that implement SIMD instructions with a parameterizable number of vector elements. The parallelism exposed by encapsulating computation in vector instructions is matched to an adjustable pool of execution units. Experiments on actual hardware show significant performance improvements. Our framework provides an important extension to the capabilities of embedded processor FPGAs which traditionally dealt with bit, integer, and low intensity floating point code, to now being able to handle vectorizable floating point computation.},
 acmid = {1950459},
 address = {New York, NY, USA},
 author = {Hagiescu, Andrei and Wong, Weng-Fai},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950459},
 isbn = {978-1-4503-0554-9},
 keyword = {co-synthesis, custom instructions, simd},
 link = {http://doi.acm.org/10.1145/1950413.1950459},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {247--256},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Co-synthesis of FPGA-based Application-specific Floating Point Simd Accelerators},
 year = {2011}
}


@inproceedings{Chin:2011:TSF:1950413.1950443,
 abstract = {Long FPGA CAD runtime has emerged as a limitation to the future scaling of FPGA densities. Already, compile times on the order of a day are common, and the situation will only get worse as FPGAs get larger. Without a concerted effort to reduce compile times, further scaling of FPGAs will eventually become impractical. Previous works have presented fast CAD tools that tradeoff quality of result for compile time. In this paper, we take a different but complementary approach. We show that the architecture of the FPGA itself can be designed to be amenable to fast-compile. If not done carefully, this can lead to lower-quality mapping results, so a careful tradeoff between area, delay, power, and compile run-time is essential. We investigate the extent to which run-time can be reduced by employing high-capacity logic blocks. We extend previous studies on logic block architectures by quantifying the area, delay and CAD runtime tradeoffs for large capacity blocks, and also investigate some multi-level logic block architectures. In addition, we present an analytically derived equation to guide the design of logic block I/O requirements.},
 acmid = {1950443},
 address = {New York, NY, USA},
 author = {Chin, Scott Y.L. and Wilton, Steven J.E.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950443},
 isbn = {978-1-4503-0554-9},
 keyword = {architecture, cad run-time, field-programmable gate arrays, fpga},
 link = {http://doi.acm.org/10.1145/1950413.1950443},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {143--152},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Towards Scalable FPGA CAD Through Architecture},
 year = {2011}
}


@proceedings{Compton:2012:2145694,
 abstract = {Welcome to the 2012 ACM International Symposium on Field-Programmable Gate Arrays (FPGA). FPGA continues to be a premier venue for researchers to present their efforts in a variety of FPGArelated areas: architecture, circuit design, Computer-Aided Design (CAD), FPGA-based computing machines, design studies and applications specially suited to FPGA implementation. In addition to the paper presentations, FPGA provides opportunities for researchers, students and industrial participants to mingle and to personally discuss research. FPGA'12 is the 20th annual meeting for this symposium. A special collection of papers, The FPGA-20, has been compiled to celebrate 20 years of successful FPGA research. A panel of experts chose the papers and Steve Trimberger and AndrÃ© DeHon edited the final contents for this anniversary volume and will present it during the conference. We received 87 submissions this year and selected 20 of these for presentation as full papers (24% acceptance rate) and these will appear in the proceedings as 10-page papers. An additional 16 submissions were selected as 4-page short-paper presentations; these consist of a 5-minute introductory presentation followed by a poster where delegates can ask detailed questions of the authors. An additional 20 poster-only presentations will allow authors to interact with attendees more directly. This year's symposium features a pre-conference workshop, "FPGAs in 2032: Challenges and Opportunities in the Next 20 Years," run by Vaughn Betz (University of Toronto) and Lesley Shannon (Simon Fraser University). All attendees are encouraged to attend. A special anniversary banquet will be held at The Monterey Bay Aquarium.},
 address = {New York, NY, USA},
 isbn = {978-1-4503-1155-7},
 location = {Monterey, California, USA},
 note = {420120},
 publisher = {ACM},
 title = {FPGA '12: Proceedings of the ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 year = {2012}
}


@inproceedings{Fu:2011:EMB:1950413.1950429,
 abstract = {Memory-related constraints (memory bandwidth, cache size) are nowadays the performance bottleneck of most computational applications. Especially in the scenario of multiple cores, the performance does not scale with the number of cores in many cases. In our work, we present our FPGA-based solution for the 3D Reverse Time Migration (RTM) algorithm. As the most computationally demanding imaging algorithm in current oil and gas exploration, RTM involves various computational challenges, such as a high demand for storage size and bandwidth, and a poor cache behavior. Combining optimizations from both the algorithmic and architectural perspectives, our FPGA-based solution manages to remove the memory constraints and provide a high performance that can scale well with the amount of computational resources available. Compared with an optimized CPU implementation using two quad-core Intel Nehalem CPUs, our solution achieves 4x speedup on two Virtex-5 FPGAs, and 8x speedup on two Virtex-6 FPGAs. Our projection demonstrates that the performance will continue to scale with the future increase of FPGA capacities.},
 acmid = {1950429},
 address = {New York, NY, USA},
 author = {Fu, Haohuan and Clapp, Robert G.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950429},
 isbn = {978-1-4503-0554-9},
 keyword = {field programmable gate arrays (fpga), reverse time migration (rtm)},
 link = {http://doi.acm.org/10.1145/1950413.1950429},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {65--74},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Eliminating the Memory Bottleneck: An FPGA-based Solution for 3D Reverse Time Migration},
 year = {2011}
}


@inproceedings{Zhang:2011:RHS:1950413.1950428,
 abstract = {Although many fast stereo matching designs have been proposed in the past decades, it is still very challenging to achieve real-time speed at high definition resolution while maintaining high matching accuracy. In this paper, we propose a real-time high definition stereo matching design on FPGA. By using the Mini-Census transform and the Cross-based cost aggregation, the proposed algorithm is robust to radiometric differences and produces accurate disparity maps. The algorithm modules have been optimized for efficient hardware implementations and instantiated in an SoC environment. Implemented on a single EP3SL150 FPGA, our design achieves 60 frames per second for 1024 Ã— 768 stereo images. Evaluated with the Middlebury stereo benchmark, the proposed design also delivers leading stereo matching accuracy among prior related work.},
 acmid = {1950428},
 address = {New York, NY, USA},
 author = {Zhang, Lu and Zhang, Ke and Chang, Tian Sheuan and Lafruit, Gauthier and Kuzmanov, Georgi Krasimirov and Verkest, Diederik},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950428},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, high-definition, parallel computing, stereo matching},
 link = {http://doi.acm.org/10.1145/1950413.1950428},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {55--64},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Real-time High-definition Stereo Matching on FPGA},
 year = {2011}
}


@inproceedings{Grant:2011:CFM:1950413.1950441,
 abstract = {Modern FPGAs are used to implement a wide range of circuits, many of which have coarse-grained and fine-grained components. The ever-increasing size of these circuits places great demand on CAD tools to synthesize circuits faster and without loss in quality. Synthesizing coarse-grained components onto fine-grained FPGA resources is inefficient, and past attempts to optimize FPGAs for word-oriented datapaths have met with limited success. This paper presents a CAD flow to fully compile Verilog into a configuration bitstream for a new type of FPGA with time-multiplexed coarse-grained resources. We demonstrate two approaches with gains of 61x and 42x in synthesis time on average compared to QuartusII, but due to time-multiplexing and current synthesis limitations we achieve circuit speeds of 14x and 8.5x slower on average. We show the tools can also trade density for maximum clock frequency.},
 acmid = {1950441},
 address = {New York, NY, USA},
 author = {Grant, David and Wang, Chris and Lemieux, Guy G.F.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950441},
 isbn = {978-1-4503-0554-9},
 keyword = {coarse-grained synthesis, fine-grained synthesis, reconfigurable computing},
 link = {http://doi.acm.org/10.1145/1950413.1950441},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {123--132},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A CAD Framework for Malibu: An FPGA with Time-multiplexed Coarse-grained Elements},
 year = {2011}
}


@inproceedings{Yamaguchi:2011:CFG:1950413.1950476,
 abstract = {The Smith-Waterman algorithm is a key technique for comparing genetic sequences. This paper presents a comprehensive study of a systolic design for Smith-Waterman algorithm. It is parameterized in terms of the sequence length, the amount of parallelism, and the number of FPGAs. Two methods of organizing the parallelism, the line-based and the lattice-based methods, are introduced. Our analytical treatment reveals how these two methods perform relative to peak performance when the level of parallelism varies. A novel systolic design is then described, showing how the parametric description can be effectively implemented, with specific focus on enhancing parallelism and on optimizing the total size of memory and circuits; in particular, we develop efficient realizations for compressing score matrices and for reducing affine gap cost functions. Promising results have been achieved showing, for example, a single XC5VLX330 FPGA at 131MHz can be three times faster than a platform with two NVIDIA GTX295 at 1242MHz.},
 acmid = {1950476},
 address = {New York, NY, USA},
 author = {Yamaguchi, Yoshiki and Tsoi, Kuen Hung and Luk, Wayne},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950476},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, gpgpu, performance comparison, sequence alignment, smith-waterman algorithm},
 link = {http://doi.acm.org/10.1145/1950413.1950476},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {281--281},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A Comparison of FPGAs, GPUS and CPUS for Smith-Waterman Algorithm (Abstract Only)},
 year = {2011}
}


@inproceedings{Paul:2011:MBC:1950413.1950481,
 abstract = {Conventional Field Programmable Gate Array (FPGA) architectures leverage on the purely spatial computing model where a design is realized in the form of a small multiple-input single-output lookup tables (LUTs) connected through programmable interconnect switches. However, such a model incorporates an elaborate programmable interconnect network which becomes a major performance bottleneck and leads to poor scalability across process technology nodes. In this paper we evaluate an alternative two-dimensional static random access memory (SRAM) array based reconfigurable computing fabric, referred to as "Memory Based Computing" (MBC) that departs from a purely spatial architecture by advocating multi-cycle evaluation at each computational element. Within a computational element, it uses a dense two-dimensional SRAM array to map large multi-input multi-output functions as LUT and evaluate them in time-multiplexed topological fashion. Multi-cycle execution at each computing node is accomplished using a local interconnect architecture. The proposed framework substantially reduces the requirement for global interconnects by folding computational resources onto a single computational element. We explore the design space for MBC to optimize the major design parameters and compare the performance, power dissipation and energy-delay product for benchmark applications between MBC and conventional SRAM-based FPGA. Simulation results show that compared to a clustered FPGA model, the proposed framework achieves 57% improvement in performance, 30% improvement in Energy Delay Product (EDP) and 10% improvement in technological scalability of performance for standard benchmark circuits. Finally, we validate the functionality of MBC framework and timing of different operations by mapping several small applications on a Cyclone III FPGA platform from Altera.},
 acmid = {1950481},
 address = {New York, NY, USA},
 author = {Paul, Somnath and Bhunia, Swarup},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950481},
 isbn = {978-1-4503-0554-9},
 keyword = {field programmable gate array (fpga), memory based computation, recongurable hardware},
 link = {http://doi.acm.org/10.1145/1950413.1950481},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {283--283},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Memory Based Computing: Reshaping the Fine-grained Logic in a Reconfigurable Framework (Abstract Only)},
 year = {2011}
}


@proceedings{Cheung:2010:1723112,
 abstract = {FPGA 2010 is the 18th annual meeting of the ACM International Symposium on Field- Programmable Gate Arrays. As we gather again in Monterey, CA, we welcome you to this premier conference for the presentation of the latest research and advances in all areas related to FPGAs. This year, we received 96 submissions from which we selected 24 excellent quality full papers for presentation at the Symposium (acceptance rate of 25%). This cohort of full-length papers provides a balanced program with strong contributions in the three areas of FPGA architecture (4), CAD tools (7) and applications (13). In an effort to widen participation, we started last year a new category known as "short papers", each having a 4-page publication, a short (5 minutes) presentation and a poster presentation. In all, 10 short papers were chosen. We will also have over 30 poster presentations that provide additional opportunities for researchers to present their work. Delegates to this year's Symposium will enjoy an interesting pre-conference workshop on "Open-Source for FPGA," and an interesting debate during the Panel Session on Monday evening on "Programming High Performance Signal Processing Systems in High Level Languages."},
 address = {New York, NY, USA},
 isbn = {978-1-60558-911-4},
 location = {Monterey, California, USA},
 note = {480100},
 publisher = {ACM},
 title = {FPGA '10: Proceedings of the 18th Annual ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 year = {2010}
}


@inproceedings{Labrecque:2011:NFE:1950413.1950422,
 abstract = {We propose NetTM: support for hardware transactional memory (HTM) in an FPGA-based soft multithreaded multicore that matches the strengths of FPGAs. We evaluate our system using the NetFPGA [6] platform and four network packet processing applications that are threaded and share memory. Relative to NetThreads [5], an existing two-processor four-way-multithreaded system with conventional lock-based synchronization, we find that adding HTM support (i) maintains a reasonable operating frequency of 125MHz with an area overhead of 20%, (ii) can transactionally execute lock-based critical sections with no software modification, and (iii) achieves 6%, 55% and 57% increases in packet throughput for three of four packet processing applications studied, due to reduced false synchronization.},
 acmid = {1950422},
 address = {New York, NY, USA},
 author = {Labrecque, Martin and Steffan, J. Gregory},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950422},
 isbn = {978-1-4503-0554-9},
 keyword = {multithreading, packet processing, signature, soft processor, speculation, transactional memory},
 link = {http://doi.acm.org/10.1145/1950413.1950422},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {29--32},
 publisher = {ACM},
 series = {FPGA '11},
 title = {NetTM: Faster and Easier Synchronization for Soft Multicores via Transactional Memory},
 year = {2011}
}


@inproceedings{Das:2011:AMR:1950413.1950449,
 abstract = {We present an analytical model relating FPGA architectural parameters to the routability of the FPGA. The inputs to the model include the channel width and connection and switch block flexibilities, and the output is an estimate of the proportion of nets in a large circuit that can be expected to be routed on the FPGA. We assume that the circuit is routed to the FPGA using a single-step combined global/detailed router. Together with the earlier works on analytical modeling, our model can be used to predict the routability without going through an expensive CAD flow. We show that the model correctly predicts routability trends.},
 acmid = {1950449},
 address = {New York, NY, USA},
 author = {Das, Joydip and Wilton, Steven J.E.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950449},
 isbn = {978-1-4503-0554-9},
 keyword = {analytical model, architecture development, fpga, routability},
 link = {http://doi.acm.org/10.1145/1950413.1950449},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {181--184},
 publisher = {ACM},
 series = {FPGA '11},
 title = {An Analytical Model Relating FPGA Architecture Parameters to Routability},
 year = {2011}
}


@inproceedings{Wang:2011:SDT:1950413.1950445,
 abstract = {This paper describes a parallel implementation of the timing-driven VPR~5.0 simulated annealing engine. By restricting the move distance to a confined neighborhood, it is possible to consider a large number of non-conflicting moves in parallel and achieve a deterministic result. The full timing-driven algorithm is parallelized, including the detailed timing analysis updates done periodically while placement progresses. The limited move slightly degrades the placement quality, but this is necessary to expose greater degrees of parallelism. The overall bounding box metric degrades about 11% and critical path delay metric degrades about 8% compared to VPR's original algorithm, but we show the amount of degradation is independent of the number of threads. Overall, the parallel implementation scales to a speedup of 123x using 25 threads compared to VPR. With additional tuning effort, we believe the algorithm can be scaled to a larger number of threads, perhaps even run on a GPU, with little additional quality degradation.},
 acmid = {1950445},
 address = {New York, NY, USA},
 author = {Wang, Chris C. and Lemieux, Guy G.F.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950445},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, parallel placement, timing-driven placement},
 link = {http://doi.acm.org/10.1145/1950413.1950445},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {153--162},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Scalable and Deterministic Timing-driven Parallel Placement for FPGAs},
 year = {2011}
}


@inproceedings{Rubin:2011:TPP:1950413.1950447,
 abstract = {We show that, with the VPR implementation of Pathfinder, perturbations of initial conditions may cause critical paths to vary over ranges of 17-110%. We further show that it is not uncommon for VPR/Pathfinder to settle for solutions that are >33% slower than necessary. These results suggest there is room for additional innovation and improvement in FPGA routing. As one step in this direction, we show how delay-targeted routing can reduce delay noise to 13% for our worst-case design and below 1% for most designs. Anyone who uses VPR as part of architecture or CAD research should be aware of this noise phenomena and the techniques available to reduce its impact.},
 acmid = {1950447},
 address = {New York, NY, USA},
 author = {Rubin, Raphael Y. and DeHon, Andr{\'e} M.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950447},
 isbn = {978-1-4503-0554-9},
 keyword = {noise, pathfinder, sensitivity, timing-driven routing, vpr},
 link = {http://doi.acm.org/10.1145/1950413.1950447},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {173--176},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Timing-driven Pathfinder Pathology and Remediation: Quantifying and Reducing Delay Noise in VPR-pathfinder},
 year = {2011}
}


@inproceedings{Le:2011:MSV:1950413.1950461,
 abstract = {Router virtualization has recently gained much interest in the research community. It allows multiple virtual router instances to run on a common physical router platform. The key metrics in designing network virtual routers are: (1) number of supported virtual router instances, (2) total number of prefixes, and (3) ability to quickly update the virtual table. Limited on-chip memory in FPGA leads to the need for memory-efficient merging algorithms. On the other hand, due to high frequency of combined updates from all the virtual routers, the merging algorithms must be highly efficient. Hence, the router must support quick updates. In this paper, we propose a simple merging algorithm whose performance is not sensitive to the number of routing tables considered. The performance solely depends on the total number of prefixes. We also propose a novel scalable, high-throughput linear pipeline architecture for IP-lookup that supports large virtual routing tables and quick non-blocking update. Using a state-of-the-art Field Programmable Gate Array (FPGA) along with external SRAM, the proposed architecture can support up to 16M IPv4 and 880K IPv6 prefixes. Our implementation shows a sustained through-put of 400 million lookups per second, even when external SRAM is used.},
 acmid = {1950461},
 address = {New York, NY, USA},
 author = {Le, Hoang and Ganegedara, Thilan and Prasanna, Viktor K.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950461},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, ip lookup, pipeline, virutal routers},
 link = {http://doi.acm.org/10.1145/1950413.1950461},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {257--266},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Memory-efficient and Scalable Virtual Routers Using FPGA},
 year = {2011}
}


@inproceedings{Yu:2011:TYI:1950413.1950467,
 abstract = {As semiconductor manufacturing technology continues towards reduced feature sizes, timing yield will degrade due to increased process variation. Traditional variation aware design (VAD) methodologies address this problem by using chipwise placement and routing optimizations given the variation distribution is obtained. However, it is very time-consuming to do chipwise variation characterization and optimization. Therefore, this work proposes the use of symmetry in FPGA architectures so that a large range of timing-equivalent configurations can be derived from a single initial implementation by configuration rotation and flipping, allowing the application of post-silicon tuning to mitigate the effects of process variation. Additionally, logic element swaps further improve timing performance. An FPGA design methodology is presented which combines configuration-level redundancy and fine-grained design tuning. The proposed methodology does not need variation characterization and customized placement and routing for each individual FPGA. Compared to other variation aware design methods, it is more cost-efficient in terms of run-time, especially for design implementation on a large amount of FPGAs. Twenty MCNC benchmark circuits in different process technologies were used to show that the proposed method is effective in improving yield and timing in the presence of process variation.},
 acmid = {1950467},
 address = {New York, NY, USA},
 author = {Yu, Haile and Xu, Qiang and Leong, Philip H.W.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950467},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, process variation, symmetrical architecture, yield},
 link = {http://doi.acm.org/10.1145/1950413.1950467},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {278--278},
 publisher = {ACM},
 series = {FPGA '11},
 title = {On Timing Yield Improvement for FPGA Designs Using Architectural Symmetry (Abstract Only)},
 year = {2011}
}


@inproceedings{Hill:2011:FFP:1950413.1950480,
 abstract = {FPGAs are increasing in computing power at a significant rate while the non-recurring engineering costs and time-to-market remain significant lower than those for application-specific integrated circuits (ASICs), encouraging FPGAs to be used in areas previous dominated by ASICs. In this study, we examine the appropriateness of FPGAs for high-performance, low-volume prodution parallel computing by mapping an existing ASIC-based massively parallel single-instruction, multiple data (SIMD) computer, the UCSC Kestrel, to a variety of FPGAs. The design has a raw peak performance of over 187 billion 8-bit operations per second (OPS), 48 times faster than the original ASIC-based Kestrel, using a Xilinx Virtex-6, and a cost efficiency of up to 81 MOPS/$ using a Xilinx Spartan-3. We also show that we can implement the entire original Kestrel (512 processing elements) as a system on a single programmable chip.},
 acmid = {1950480},
 address = {New York, NY, USA},
 author = {Hill, Andrew W. and Di Blas, Andrea and Hughey, Richard},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950480},
 isbn = {978-1-4503-0554-9},
 keyword = {parallel computing, simd, system on a programmable chip},
 link = {http://doi.acm.org/10.1145/1950413.1950480},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {283--283},
 publisher = {ACM},
 series = {FPGA '11},
 title = {FPGA-based Fine-grain Parallel Computing (Abstract Only)},
 year = {2011}
}


@inproceedings{Wong:2011:CFV:1950413.1950419,
 abstract = {As soft processors are increasingly used in diverse applications, there is a need to evolve their microarchitectures in a way that suits the FPGA implementation substrate. This paper compares the delay and area of a comprehensive set of processor building block circuits when implemented on custom CMOS and FPGA substrates. We then use the results of these comparisons to infer how the microarchitecture of soft processors on FPGAs should be different from hard processors on custom CMOS. We find that the ratios of the area required by an FPGA to that of custom CMOS for different building blocks varies significantly more than the speed ratios. As area is often a key design constraint in FPGA circuits, area ratios have the most impact on microarchitecture choices. Complete processor cores have area ratios of 17-27x and delay ratios of 18-26x. Building blocks that have dedicated hardware support on FPGAs such as SRAMs, adders, and multipliers are particularly area-efficient (2-7x area ratio), while multiplexers and CAMs are particularly area-inefficient (>100x area ratio), leading to cheaper ALUs, larger caches of low associativity, and more expensive bypass networks than on similar hard processors. We also find that a low delay ratio for pipeline latches (12-19x) suggests soft processors should have pipeline depths 20% greater than hard processors of similar complexity.},
 acmid = {1950419},
 address = {New York, NY, USA},
 author = {Wong, Henry and Betz, Vaughn and Rose, Jonathan},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950419},
 isbn = {978-1-4503-0554-9},
 keyword = {area, cmos, delay, fpga, soft processor},
 link = {http://doi.acm.org/10.1145/1950413.1950419},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {5--14},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Comparing FPGA vs. Custom Cmos and the Impact on Processor Microarchitecture},
 year = {2011}
}


@inproceedings{Chung:2011:CIM:1950413.1950435,
 abstract = {FPGAs have been used in many applications to achieve orders-of-magnitude improvement in absolute performance and energy efficiency relative to conventional microprocessors. Despite their promise in both processing performance and efficiency, FPGAs have not yet gained widespread acceptance as mainstream computing devices. A fundamental obstacle to FPGA-based computing today is the FPGA's lack of a common, scalable memory architecture. When developing applications for FPGAs, designers are often directly responsible for crafting the application-specific infrastructure logic that manages and transports data to and from the processing kernels. This infrastructure not only increases design time and effort but will frequently lock a design to a particular FPGA product line, hindering scalability and portability. We propose a new FPGA memory architecture called Connected RAM (CoRAM) to serve as a portable bridge between the distributed computation kernels and the external memory interfaces. In addition to improving performance and efficiency, the CoRAM architecture provides a virtualized memory environment as seen by the hardware kernels to simplify development and to improve an application's portability and scalability.},
 acmid = {1950435},
 address = {New York, NY, USA},
 author = {Chung, Eric S. and Hoe, James C. and Mai, Ken},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950435},
 isbn = {978-1-4503-0554-9},
 keyword = {abstraction, fpga, memory, reconfigurable computing},
 link = {http://doi.acm.org/10.1145/1950413.1950435},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {97--106},
 publisher = {ACM},
 series = {FPGA '11},
 title = {CoRAM: An In-fabric Memory Architecture for FPGA-based Computing},
 year = {2011}
}


@inproceedings{Parandeh-Afshar:2011:RPR:1950413.1950458,
 abstract = {Routing resources in modern FPGAs use 50% of the silicon real estate and are significant contributors to critical path delay and power consumption; the situation gets worse with each successive process generation, as transistors scale more effectively than wires. To cope with these challenges, FPGA architects have divided wires into local and global categories and introduced fast dedicated carry chains between adjacent logic cells, which reduce routing resource usage for certain arithmetic circuits (primarily adders and subtractors). Inspired by the carry chains, we generalize the idea to connect lookup tables (LUTs) in adjacent logic cells. By exploiting the fracturable structure of LUTs in current FPGA generations, we increase the utilization of the existing LUTs in the logic cell by providing new inputs along the logic chain, but without increasing the I/O bandwidth from the programmable interconnect. This allows us to increase the logic density of the configurable logic cells while reducing demand for routing resources, as long as the mapping tools are able to exploit the logic chains. Our experiments using the combinational MCNC benchmarks and comparing against an Altera Stratix-III FPGA show that the introduction of logic chains reduce the average usage of local routing wires by 37%, with a 12% reduction in total wiring (local and global); this translates to improvements in dynamic power consumption of 18% in the routing network and 10% overall, while utilizing 4% fewer logic cells, on average.},
 acmid = {1950458},
 address = {New York, NY, USA},
 author = {Parandeh-Afshar, Hadi and Zgheib, Grace and Brisk, Philp and Ienne, Paolo},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950458},
 isbn = {978-1-4503-0554-9},
 keyword = {dedicated connection, fpga, generic synthesis, logic chain, routing wire},
 link = {http://doi.acm.org/10.1145/1950413.1950458},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {237--246},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Reducing the Pressure on Routing Resources of FPGAs with Generic Logic Chains},
 year = {2011}
}


@inproceedings{Zhu:2011:CPB:1950413.1950475,
 abstract = {Dual-VDD FPGA architecture has been proposed to reduce the FPGA's power consumption, where a low VDD (VDDL) is assigned to non-critical resources and unused resources are power-gated. In this paper, a path-delay-distribution (PDD) based design method of supply voltage in dual-VDD FPGA is developed, which gives an estimated optimal VDD solution for the required applications. Meanwhile, an improved tree-based VDD assignment algorithm is accordingly designed. Thus chip-level optimization of dual-VDD FPGA is achieved on the chosen granularity with the power consumption minimized. Based on MCNC benchmark circuits at 90nm technology node, our experimental result shows that: the power reduction rate depends on VDDL level; the design method proposed in this work gives the optimal one automatically. This design method could be utilized to guide the FPGA automatic design, saving the time to search for the system's optimal supply voltage, and the proposed assignment algorithm is more efficient in dynamic power reduction.},
 acmid = {1950475},
 address = {New York, NY, USA},
 author = {Zhu, Jianfeng and Wu, Dong and Yan, Yaru and Yu, Xiao and He, Hu and Pan, Liyang},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950475},
 isbn = {978-1-4503-0554-9},
 keyword = {dual-vdd, fpga, path delay distribution},
 link = {http://doi.acm.org/10.1145/1950413.1950475},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {281--281},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A Chip-level Path-delay-distribution Based Dual-VDD Method for Low Power FPGA (Abstract Only)},
 year = {2011}
}


@inproceedings{Jerez:2011:FIS:1950413.1950454,
 abstract = {Model predictive control (MPC) is an advanced industrial control technique that relies on the solution of a quadratic programming (QP) problem at every sampling instant to determine the input action required to control the current and future behaviour of a physical system. Its ability in handling large multiple input multiple output (MIMO) systems with physical constraints has led to very successful applications in slow processes, where there is sufficient time for solving the optimization problem between sampling instants. The application of MPC to faster systems, which adds the requirement of greater sampling frequencies, relies on new ways of finding faster solutions to QP problems. Field-programmable gate arrays (FPGAs) are specially well suited for this application due to the large amount of computation for a small amount of I/O. In addition, unlike a software implementation, an FPGA can provide the precise timing guarantees required for interfacing the controller to the physical system. We present a high-throughput floating-point FPGA implementation that exploits the parallelism inherent in interior-point optimization methods. It is shown that by considering that the QPs come from a control formulation, it is possible to make heavy use of the sparsity in the problem to save computations and reduce memory requirements by 75%. The implementation yields a 6.5x improvement in latency and a 51x improvement in throughput for large problems over a software implementation running on a general purpose microprocessor.},
 acmid = {1950454},
 address = {New York, NY, USA},
 author = {Jerez, Juan Luis and Constantinides, George Anthony and Kerrigan, Eric C.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950454},
 isbn = {978-1-4503-0554-9},
 keyword = {interior-point, model predictive control, optimization},
 link = {http://doi.acm.org/10.1145/1950413.1950454},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {209--218},
 publisher = {ACM},
 series = {FPGA '11},
 title = {An FPGA Implementation of a Sparse Quadratic Programming Solver for Constrained Predictive Control},
 year = {2011}
}


@inproceedings{Cong:2011:RIB:1950413.1950469,
 abstract = {Existing C-to-FPGA high-level synthesis (HLS) tools are good at exploiting instruction-level and loop-level parallelism, but not efficient at exploiting task-level parallelism (or requires extensive manual re-write). In this paper, we present an automated flow and architecture template to map task-level data-model (coarse-grain task graphs) onto FPGAs. We automatically generate multiple communicating FSMDs (finite-state machine with datapath) based on the architecture template to manage the required synchronization and communication. The key architectural components in our approach include a progress table that traces task execution, an automatic memory duplication scheme that enables a larger parallelism and provides isolation between different tasks, and a memory lifetime analysis and reuse scheme to reduce the on-chip memory consumption. Through data-flow driven execution, the presented flow can reduce the total latency by 30%, with moderate area overhead, when compared with the RTL implementation using a single hierarchical FSMD generated by a state-of-art HLS tool.},
 acmid = {1950469},
 address = {New York, NY, USA},
 author = {Cong, Jason and Zou, Yi},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950469},
 isbn = {978-1-4503-0554-9},
 keyword = {barrier, fpga, template},
 link = {http://doi.acm.org/10.1145/1950413.1950469},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {278--278},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Resolving Implicit Barrier Synchronizations in FPGA HLS (Abstract Only)},
 year = {2011}
}


@inproceedings{Cai:2011:FNF:1950413.1950485,
 abstract = {NAND Flash memory has been widely used for data storage due to its high density, high throughput, low cost, and low power. However, as the storage cells become smaller and with more bits programmed per cell, they are expected to suffer from reduced reliability and limited endurance. Wear-leveling and signal processing can significantly improve both reliability and endurance. However, finding optimal algorithms would require a quick and accurate characterization of Flash memory providing an insight into the error patterns. To this end, we have designed and implemented an FPGA-based framework for quick, accurate, and comprehensive characterization of Flash memories to allow efficient algorithm explorations.},
 acmid = {1950485},
 address = {New York, NY, USA},
 author = {Cai, Yu and Haratsch, Erich and McCartney, Mark and Bhargava, Mudit and Mai, Ken},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950485},
 isbn = {978-1-4503-0554-9},
 keyword = {flash controller, fpga, nand flash, solid state drive},
 link = {http://doi.acm.org/10.1145/1950413.1950485},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {284--284},
 publisher = {ACM},
 series = {FPGA '11},
 title = {FPGA-based Nand Flash Memory Error Characterization and Solid-state Drive Prototyping Platform (Abstract Only)},
 year = {2011}
}


@inproceedings{Adler:2011:LSA:1950413.1950421,
 abstract = {Developers accelerating applications on FPGAs or other reconfigurable logic have nothing but raw memory devices in their standard toolkits. Each project typically includes tedious development of single-use memory management. Software developers expect a programming environment to include automatic memory management. Virtual memory provides the illusion of very large arrays and processor caches reduce access latency without explicit programmer instructions. LEAP scratchpads for reconfigurable logic dynamically allocate and manage multiple, independent, memory arrays in a large backing store. Scratchpad accesses are cached automatically in multiple levels, ranging from shared on-board, RAM-based, set-associative caches to private caches stored in FPGA RAM blocks. In the LEAP framework, scratchpads share the same interface as on-die RAM blocks and are plug-in replacements. Additional libraries support heap management within a storage set. Like software developers, accelerator authors using scratchpads may focus more on core algorithms and less on memory management.},
 acmid = {1950421},
 address = {New York, NY, USA},
 author = {Adler, Michael and Fleming, Kermin E. and Parashar, Angshuman and Pellauer, Michael and Emer, Joel},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950421},
 isbn = {978-1-4503-0554-9},
 keyword = {caches, fpga, memory management},
 link = {http://doi.acm.org/10.1145/1950413.1950421},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {25--28},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Leap Scratchpads: Automatic Memory and Cache Management for Reconfigurable Logic},
 year = {2011}
}


@inproceedings{Ributzka:2011:DIF:1950413.1950438,
 abstract = {This paper introduces the Delaware Enhanced Emulation Platform (DEEP) - a FPGA-based emulation system for hardware/software co-verification of many-core chip architectures. This platform exhibits the following three characteristics: fast compilation of logic designs, debugging support, and affordability. It is based on a novel iterative emulation methodology for hardware design and verification. We also conducted a logic design and integration of a new architectural feature that provides Full/Empty bit fine-grain synchronization for the IBM Cyclops-64 many-core architecture and evaluated its performance against existing synchronization constructs.},
 acmid = {1950438},
 address = {New York, NY, USA},
 author = {Ributzka, Juergen and Hayashi, Yuhei and Chen, Fei and Gao, Guang R.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950438},
 isbn = {978-1-4503-0554-9},
 keyword = {fine-grain synchronization, fpga-based emulation, many-core architecture},
 link = {http://doi.acm.org/10.1145/1950413.1950438},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {115--118},
 publisher = {ACM},
 series = {FPGA '11},
 title = {DEEP: An Iterative Fpga-based Many-core Emulation System for Chip Verification and Architecture Research},
 year = {2011}
}


@inproceedings{Wong:2011:IDM:1950413.1950446,
 abstract = {The ability to measure delay of arbitrary circuits on FPGA offers many opportunities for on-chip characterisation and optimisation. This paper describes an improved delay measurement method by monitoring the transition probability at the output nodes as the operating frequency is swept. The new method uses optimised test vector generation to improve the accuracy of the test method. It is effectively demonstrated on a 4th order IIR filter circuit implemented on an Altera Cyclone III FPGA.},
 acmid = {1950446},
 address = {New York, NY, USA},
 author = {Wong, Justin S.J. and Cheung, Peter Y.K.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950446},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, self test, timing, transition probability},
 link = {http://doi.acm.org/10.1145/1950413.1950446},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {163--172},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Improved Delay Measurement Method in FPGA Based on Transition Probability},
 year = {2011}
}


@inproceedings{Wawrzynek:2011:ACL:1950413.1950417,
 abstract = {For years, many academic researchers in reconfigurable computing have been frustrated by their reliance on commercial FPGAs and tools. Commercial FPGAs have highly complex micro-architectures, come with undocumented binary interfaces, have no compatibility between generations, and come with difficult to use proprietary place and route tools. The FPGA vendors are making the right moves for serving their commercial customer base, but it seems at times these moves are in conflict with the needs of the academic research community. These problems make it difficult for academics to teach FPGA design and to participate in relevant research related to FPGAs. Complex FPGA fabrics and undocumented proprietary interfaces make it nearly impossible to build new tools to target actual commercial devices. University researchers are now hesitant to participate in FPGA architecture research because the level of complexity of FPGAs is beyond what is possible to implement in an academic setting. Reconfigurable computing application developers are at the mercy of complex FPGA devices and closed-source place and route tools - not optimized for computing applications. Some argue that the time is right for academia to break away and create an open source FPGA device. Such an effort would enable university researchers to take an active role in architecture design, and promote an open source community effort in developing and advancing the state of the art of tools. A similar situation existed in the early 80's surrounding processor design. As a result of competition among the big computer companies, microprocessor designs had evolved from very simple beginnings to highly complex architectures and equally complex compilers. Universities were largely on the sidelines, as they couldn't compete at the level of industrial designs of the day. "RISC" changed all that. By adopting simple architectures, universities were once again able to actually design and implement their own processors and to innovate with microarchitecture and compilers. Is it time for a "RISC" revolution for FPGAs? FPGA companies might argue that FPGA platforms are necessarily complex and out of the realm of what's possible to implement within an academic setting, and would say that an open source effort in not necessary, as they are helping to promote academic research by collaborations with universities, and donation of tools, and hardware platforms. This panel will discuss the pros and cons of an academic community led open FPGA device and tools development effort.},
 acmid = {1950417},
 address = {New York, NY, USA},
 author = {Wawrzynek, John},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950417},
 isbn = {978-1-4503-0554-9},
 keyword = {design tools, dsp, fpga, high level programming models, open source, reconfigurable computing, signal processing},
 link = {http://doi.acm.org/10.1145/1950413.1950417},
 location = {Monterey, CA, USA},
 numpages = {2},
 pages = {3--4},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Should the Academic Community Launch an Open-source FPGA Device and Tools Effort?: Evening Panel},
 year = {2011}
}


@inproceedings{Rose:2011:RFC:1950413.1950415,
 abstract = {The battle of fixed function devices vs. programmable devices has been won by the programmables. The question facing us now is to determine what kinds of programmability to place on next generation systems/devices. Research and development on many applications has shown that different kinds of hardware and software programmability succeed for different application classes: powerful, singlethread-optimized CPUs continue to do very well for many applications; the General Purpose GPU is carving a niche in high throughput, parallel floating point codes in addition to its home turf of graphics; the FPGA is particularly good at variable bit-size computations and data steering, as well as parallel distributed control of networks. Future systems may well need all three types of these types of engines, and perhaps interesting mixtures of them. This is particularly true when we deal with the combined goals of optimizing cost, performance and energy. In this workshop, we will look to the future of the FPGA within these types of 'converged' programmable computing engines, and reflectively ask ourselves: What role can the FPGA play? What future applications in areas such as networking, mobile, and artificial intelligence can be driven by FPGAs? How do FPGAs fit into the architecture realm of CPUs, general purpose GPUs, and DSPs? How should the designer/programme express their intent in the most effective way possible? What are the requirements for a compilation and optimization environment that allow FPGAs to intermix within a heterogeneous and converged future? The intent of this workshop is to open a discussion on these questions. There will be a series of short, invited talks interspersed with free and open discussion.},
 acmid = {1950415},
 address = {New York, NY, USA},
 author = {Rose, Jonathan and Lemieux, Guy},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950415},
 isbn = {978-1-4503-0554-9},
 keyword = {dsp, fpga, heterogeneity, heterogeneous computing systems, high level programming models, reconfigurable computing, signal processing},
 link = {http://doi.acm.org/10.1145/1950413.1950415},
 location = {Monterey, CA, USA},
 numpages = {2},
 pages = {1--2},
 publisher = {ACM},
 series = {FPGA '11},
 title = {The Role of FPGAs in a Converged Future with Heterogeneous Programmable Processors: Pre-conference Workshop},
 year = {2011}
}


@inproceedings{Chou:2011:VSV:1950413.1950420,
 abstract = {This paper presents VEGAS, a new soft vector architecture, in which the vector processor reads and writes directly to a scratchpad memory instead of a vector register file. The scratchpad memory is a more efficient storage medium than a vector register file, allowing up to 9x more data elements to fit into on-chip memory. In addition, the use of fracturable ALUs in VEGAS allow efficient processing of bytes, halfwords and words in the same processor instance, providing up to 4x the operations compared to existing fixed-width soft vector ALUs. Benchmarks show the new VEGAS architecture is 10x to 208x faster than Nios II and has 1.7x to 3.1x better area-delay product than previous vector work, achieving much higher throughput per unit area. To put this performance in perspective, VEGAS is faster than a leading-edge Intel processor at integer matrix multiply. To ease programming effort and provide full debug support, VEGAS uses a C macro API that outputs vector instructions as standard NIOS II/f custom instructions.},
 acmid = {1950420},
 address = {New York, NY, USA},
 author = {Chou, Christopher H. and Severance, Aaron and Brant, Alex D. and Liu, Zhiduo and Sant, Saurabh and Lemieux, Guy G.F.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950420},
 isbn = {978-1-4503-0554-9},
 keyword = {fpga, scratchpad memory, simd, soft processors, vector},
 link = {http://doi.acm.org/10.1145/1950413.1950420},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {15--24},
 publisher = {ACM},
 series = {FPGA '11},
 title = {VEGAS: Soft Vector Processor with Scratchpad Memory},
 year = {2011}
}


@inproceedings{Chandra:2011:TAO:1950413.1950486,
 abstract = {Currently C-to-hardware (C2H) compilation tools have the potential to generate high-performing and efficient hardware functions from application source code. But often this is not realised without expensive manual code modifications to massage the input source code into a form whereby the compiler can extract maximum meaning from it, thus improving the quality of generated hardware. These modifications represent a significant hurdle for software developers; to improve this we present our work towards a semi-automated compilation framework that attempts to streamline this design flow. The proposed framework consists of an extensible analysis phase of input source code and automated generation of code-mutations that serve as trial candidates. These are then automatically combined within the greater SoPC environment and passed through a parallel compilation stage through the C2H tool. Based on the compilation results the process can be refined and re-executed after manually-assisted candidate pruning. In experimental results, a significant performance speedup has been demonstrated when applying these techniques to simple examples which were compiled out-of-the-box with the same C2H tool. Moreover, minimal extra development effort was necessary to achieve these results. Open challenges still remain, but we believe the promise of such an augmented approach to tool-generated SoPC designs is clear.},
 acmid = {1950486},
 address = {New York, NY, USA},
 author = {Chandra, Ravikesh and Sinnen, Oliver},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950486},
 isbn = {978-1-4503-0554-9},
 keyword = {c-to-hardware, compilers, design space exploration, fpga, sopc},
 link = {http://doi.acm.org/10.1145/1950413.1950486},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {285--285},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Towards Automated Optimisation of Tool-generated HW/SW Sopc Designs (Abstract Only)},
 year = {2011}
}


@inproceedings{Steiner:2011:TTO:1950413.1950425,
 abstract = {We present and describe Torc - (Tools for Open Reconfigurable Computing) - an open-source infrastructure and tool set, provided entirely as C++ source code and available at http://torc.isi.edu. Torc is suitable for custom research applications, for CAD tool development, and for architecture exploration. The Torc infrastructure can (1) read, write, and manipulate generic netlists - currently EDIF, (2) read, write, and manipulate physical netlists - currently XDL, and indirectly NCD, (3) provide exhaustive wiring and logic information for commercial devices, and (4) read, write, and manipulate bitstream packets (but not configuration frame contents). Torc furthermore provides routing and unpacking tools for full or partial designs, soon to be augmented with BLIF support, and with packing and placing tools. The architectural data for Xilinx devices is generated from non-proprietary XDLRC files, and currently supports 140 devices in 11 families: Virtex, Virtex-E, Virtex-II, Virtex-II Pro, Virtex4, Virtex5, Virtex6, Virtex6L, Spartan3E, Spartan6, and Spartan6L. We believe that Altera architectures and designs could be similarly supported if the necessary data were available, and we have successfully used Torc internally with custom architectures.},
 acmid = {1950425},
 address = {New York, NY, USA},
 author = {Steiner, Neil and Wood, Aaron and Shojaei, Hamid and Couch, Jacob and Athanas, Peter and French, Matthew},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950425},
 isbn = {978-1-4503-0554-9},
 keyword = {c++, edif, fpga, place, route, unpack, xdl, xdlrc},
 link = {http://doi.acm.org/10.1145/1950413.1950425},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {41--44},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Torc: Towards an Open-source Tool Flow},
 year = {2011}
}


@inproceedings{Singh:2011:RDL:1950413.1950450,
 abstract = {Are user specified layout constraints of significant value anymore? Certainly in the past the use of the RLOC layout constraint for Xilinx FPGAs was essential for achieving the best possible performance for many kinds of highly structured designs. However, have CAD tools evolved to the point where they can always compute layouts as good as (if not better than) humans? Or has the introduction of on-chip hard cores, which create an irregular 2D surface for layouts, made layout specification impractical? Or has the varying pitch and types of combinational logic blocks (CLBs) made it intractable to produce layout descriptions that are portable across architectures? We show that the use of layout constraints still delivers a large performance gain for Xilinx's recent Virtex-6 family of FPGAs. The performance gain is sometime large enough to accommodate a reduction of two speed grades.},
 acmid = {1950450},
 address = {New York, NY, USA},
 author = {Singh, Satnam},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950450},
 isbn = {978-1-4503-0554-9},
 keyword = {circuit layout},
 link = {http://doi.acm.org/10.1145/1950413.1950450},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {185--188},
 publisher = {ACM},
 series = {FPGA '11},
 title = {The RLOC is Dead - Long Live the RLOC},
 year = {2011}
}


@inproceedings{Chen:2011:LIR:1950413.1950442,
 abstract = {FPGA logic density is roughly doubling at every process generation. Consequently, it is becoming increasingly challenging for FPGA CAD tools to keep up with the growing complexities of high-speed designs while keeping CAD run-times reasonable. In this paper, we present a novel incremental resynthesis tool called Line-Level Incremental reSynthesis (LLIS), integrated within an industrial tool suite, that addresses the problems of timing closure as well as CAD runtime (patent pending). We describe a general framework that can incrementally reuse results from a previous compile based on automatic differencing of HDL changes. We show that it is possible to reduce synthesis runtime by 6.5x for common HDL changes. As compared with complete resynthesis, we preserve known good timing solutions more than 82% of the time. This represents a 3X improvement vs. non-incremental techniques.},
 acmid = {1950442},
 address = {New York, NY, USA},
 author = {Chen, Doris and Singh, Deshanand},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950442},
 isbn = {978-1-4503-0554-9},
 keyword = {algorithms},
 link = {http://doi.acm.org/10.1145/1950413.1950442},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {133--142},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Line-level Incremental Resynthesis Techniques for FPGAs},
 year = {2011}
}


@inproceedings{Canis:2011:LHS:1950413.1950423,
 abstract = {In this paper, we introduce a new open source high-level synthesis tool called LegUp that allows software techniques to be used for hardware design. LegUp accepts a standard C program as input and automatically compiles the program to a hybrid architecture containing an FPGA-based MIPS soft processor and custom hardware accelerators that communicate through a standard bus interface. Results show that the tool produces hardware solutions of comparable quality to a commercial high-level synthesis tool.},
 acmid = {1950423},
 address = {New York, NY, USA},
 author = {Canis, Andrew and Choi, Jongsok and Aldham, Mark and Zhang, Victor and Kammoona, Ahmed and Anderson, Jason H. and Brown, Stephen and Czajkowski, Tomasz},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950423},
 isbn = {978-1-4503-0554-9},
 keyword = {field-programmable gate arrays, fpgas, hardware/software co-design, high-level synthesis},
 link = {http://doi.acm.org/10.1145/1950413.1950423},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {33--36},
 publisher = {ACM},
 series = {FPGA '11},
 title = {LegUp: High-level Synthesis for FPGA-based Processor/Accelerator Systems},
 year = {2011}
}


@inproceedings{Richfield:2011:DIE:1950413.1950466,
 abstract = {The "Itanium Effect" is a subtle organizational phenomenon leading to the wide adoption of a few widely applicable technologies, and the abandonment of many powerful but more narrowly applicable technologies. This results in potential technological revolutions simply dying on the vine due to a general lack of knowledge about potential enabling technologies. The main elements of the Itanium Effect are: 1. Technology loops, where a limited set of methods results in recreating products from the past, often without correcting their architectural errors 2. Compartmentalized conferences, e.g. FPGA, that work to inhibit designs that merge disciplines 3. Little PhD student participation, that chokes off the supply of fresh ideas 4. Procedural exclusion of futurist and top-down discussions, so that the entire industry proceeds without futurist goals 5. Keeping problems secret, so that no one else can help The Itanium Effect has become the leading barrier to advancement of high performance computing. We now appear to be on the verge of a computational singularity, where a hundredfold performance gain is available from architectural changes alone, due to the elimination of various sorts of choke points. Unfortunately, there is presently a high threshold to overcome, as there are several enabling technologies that must be simultaneously developed. This can't come from CPU, GPU, or FPGA manufacturers acting alone. These areas must be merged, and somewhat obscure enabling technologies added to glue it all together. The prospective glue technologies examined in this paper include: 1. Logarithmic arithmetic 2. Medium-grained and multi-grained FPGAs 3. Coherent memory mapping 4. Variable data chaining 5. Fast aggregation across ALUs 6. Blurring the SIMD/MIMD distinction using small local program memories 7. A simple horizontal microcoding interface for applications 8. Failsoft configuration on power-up 9. Failsoft partial reconfiguration during execution 10. Physically symmetrical pinout to facilitate the use of defective components. 11. An architecture-independent universal compiler to compile a new APL-level language},
 acmid = {1950466},
 address = {New York, NY, USA},
 author = {Richfield, Steve},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950466},
 isbn = {978-1-4503-0554-9},
 keyword = {aggregation, alu, apl, befuddlement, coherent memory mapping, cpu, data chaining, failsoft reconfiguration, flops/transistor, fpga, genetic algorithm, gpu, horizontal microcoding, instruction lookahead, itanium effect, logarithmic arithmetic, medium granularity, mentoring, multi-grain, secded, simd/mimd, symmetrical pinout, universal compiler},
 link = {http://doi.acm.org/10.1145/1950413.1950466},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {277--277},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Dealing with the "Itanium Effect" (Abstract Only)},
 year = {2011}
}


@proceedings{Wawrzynek:2011:1950413,
 abstract = {We welcome you to the 19th annual ACM International Symposium on Field-Programmable Gate Arrays. This is premier venue for disseminating research advances in a wide range of topic areas related to FPGAs and FPGA-like technologies. In response to the FPGA 2011 Call for Papers, 82 papers were submitted. From these, the program committee accepted 21 full-length papers (25.6% acceptance rate). We also continued the practice started in 2010 of accepting a number of short (fourpage) papers in order to broaden the participation in the conference, and highlight interesting new projects. The authors of these papers are given the opportunity to give a five-minute oral presentation, followed by a poster presentation to spur discussion. This year we have 16 short papers. Additionally, there are over 20 poster-only presentations that allow authors to interact with attendees more directly. This year's symposium features a pre-conference workshop, "The Role of FPGAs in a Converged Future with Heterogeneous Programmable Processors", run by Jonathan Rose (University of Toronto) and Guy Lemieux (University of British Columbia). All FPGA 2011 attendees are encouraged to participate. We will also have an evening panel, organized by John Wawrzynek (UC Berkeley), entitled "Should the Academic Community Launch an Open Source FPGA Device and Tools Effort?"},
 address = {New York, NY, USA},
 isbn = {978-1-4503-0554-9},
 location = {Monterey, CA, USA},
 note = {480110},
 publisher = {ACM},
 title = {FPGA '11: Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 year = {2011}
}


@inproceedings{Jing:2011:FMC:1950413.1950471,
 abstract = {The reliability of SRAM-based Field Programmable Gate Array (FPGA) is susceptible to Single Event Upset (SEU) fault. To investigate the fault impact, particular the fault in interconnects on FPGA functionality, this paper proposes a SEU fault analysis framework by evaluating the fault with a unified metric. This metric, termed as criticality, quantifies the sensitivity of FPGA functional failure to the SEU fault on logical and interconnect configuration bits. Considering the post layout information, our framework can characterize the SEU fault with respect to different FPGA architectures and CAD algorithms, such that the sensitivity of FPGA functional failure can be investigated in detail during design phase. The experiment result quantitatively shows that the configuration bits in interconnects dominate those in LUTs, several times both in bit number and criticality contribution. The ratio of their criticalities is even higher when LUT input size increases from 4 to 6. The higher criticality of interconnects than their LUT counterpart is due to their natural sensitivity to functional failure instead of their majority of bits. In addition, it is also shown that, among the three common types of switch boxes, the Subset switch box is less fault tolerant than Wilton and Universal.},
 acmid = {1950471},
 address = {New York, NY, USA},
 author = {Jing, Naifeng and Lee, Ju-Yueh and Zhang, Chun and Tong, Jiarong and Mao, Zhigang and He, Lei},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950471},
 isbn = {978-1-4503-0554-9},
 keyword = {fault tolerance, fpga, interconnects, reliability, seu},
 link = {http://doi.acm.org/10.1145/1950413.1950471},
 location = {Monterey, CA, USA},
 numpages = {1},
 pages = {279--279},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Fault Modeling and Characteristics of SRAM-based FPGAs (Abstract Only)},
 year = {2011}
}


@inproceedings{Yeung:2011:MFU:1950413.1950453,
 abstract = {Monte-Carlo arithmetic is a form of self-validating arithmetic that accounts for the effect of rounding errors. We have implemented a floating point unit that can perform either IEEE 754 or Monte-Carlo floating point computation, allowing hardware accelerated validation of results during execution. Experiments show that our approach has a modest hardware overhead and allows the propagation of rounding error to be accurately estimated.},
 acmid = {1950453},
 address = {New York, NY, USA},
 author = {Yeung, Jackson H.C. and Young, Evangeline F.Y. and Leong, Philip H.W.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950453},
 isbn = {978-1-4503-0554-9},
 keyword = {floating-point, fpga, fpu, monte carlo arithmetic},
 link = {http://doi.acm.org/10.1145/1950413.1950453},
 location = {Monterey, CA, USA},
 numpages = {10},
 pages = {199--208},
 publisher = {ACM},
 series = {FPGA '11},
 title = {A Monte-carlo Floating-point Unit for Self-validating Arithmetic},
 year = {2011}
}


@inproceedings{Gao:2011:IDA:1950413.1950431,
 abstract = {In recent years, the classic method of Coordinate Rotation by Digital Computer (CORDIC) arithmetic has been widely implemented as part of the computational requirements of the well known QR-RLS (Recursive Least Squares) algorithm. In order to operate Givens rotation on a complex number value system, double angle complex rotation (DACR) was adopted to simplify the computational requirement of Complex Givens Rotation. This paper presents a new architecture of high speed CORDIC based single Processor Element (PE) that can be used to accomplish the complex value QR update based RLS. The implementation results on Xilinx FPGA implementaton demonstrates that the proposed structure results in a lower latency and lower cost.},
 acmid = {1950431},
 address = {New York, NY, USA},
 author = {Gao, Qiang and Stewart, Robert W.},
 booktitle = {Proceedings of the 19th ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
 doi = {10.1145/1950413.1950431},
 isbn = {978-1-4503-0554-9},
 keyword = {cordic, fpga, qr-rls},
 link = {http://doi.acm.org/10.1145/1950413.1950431},
 location = {Monterey, CA, USA},
 numpages = {4},
 pages = {79--82},
 publisher = {ACM},
 series = {FPGA '11},
 title = {Improved Double Angle Complex Rotation QRD-RLS},
 year = {2011}
}


