@inproceedings{Wang:2016:ECM:2934872.2959074,
 abstract = {*** The rapid development of mobile internet abstracts many non-professional persons to creating mobile applications. Traditional development process cannot meet their needs. In this paper, we present a cross-platform mobile development environment based on OSGi framework, EasyApp. It provides a highly-integrated, UI-friendly and easily-operating environment. Applications are comprehensively developed with web techniques. Users could create mobile applications with draggable widgets. Native APIs of mobile phone can be invoked with abundant plugins. After designing, users could package and download applications of multiple platforms. ***},
 acmid = {2959074},
 address = {New York, NY, USA},
 author = {Wang, Zhaoning and Cheng, Bo and Zhai, Zhongyi and Jin, Ying and Feng, Yimeng and Chen, Junliang},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959074},
 isbn = {978-1-4503-4193-6},
 keyword = {End-user development, Mobile application, OSGi, Widgets communication},
 link = {http://doi.acm.org/10.1145/2934872.2959074},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {615--616},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {EasyApp: A Cross-platform Mobile Applications Development Environment Based on OSGi},
 year = {2016}
}


@inproceedings{Gkounis:2016:CIR:2934872.2959066,
 abstract = {No abstract written},
 acmid = {2959066},
 address = {New York, NY, USA},
 author = {Gkounis, Dimitrios and Klaedtke, Felix and Bifulco, Roberto and Karame, Ghassan O.},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959066},
 isbn = {978-1-4503-4193-6},
 link = {http://doi.acm.org/10.1145/2934872.2959066},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {599--600},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Cases for Including a Reference Monitor to SDN},
 year = {2016}
}


@inproceedings{Frommgen:2016:CRR:2934872.2959076,
 abstract = {Network emulations are widely used in the networking community. The network emulator Mininet recently gained popularity, as it allows running real Linux applications on top of an emulated network. The specification of the network includes the topology as well as static bandwidth, latency, and packet drops probability parameters. Even though evaluations with static parameters provide useful insights, real world measurements show dynamically changing bandwidths, posing special challenges that need to be addressed in network research. In this demo, we capture bandwidth traces in the wild and reproducibly replay these traces in Mininet. Our \emph{capture and replay} infrastructure consists of a Mininet extension for replaying bandwidth traces, a measurement Android app, as well as a graphical repository for bandwidth traces. We exemplary demonstrate this toolchain for reproducible DASH and Multipath TCP experiments.},
 acmid = {2959076},
 address = {New York, NY, USA},
 author = {Fr\"{o}mmgen, Alexander and Stohr, Denny and Fornoff, Jan and Effelsberg, Wolfgang and Buchmann, Alejandro},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959076},
 isbn = {978-1-4503-4193-6},
 keyword = {Bandwidth Replay, Mininet, Reproducible Research},
 link = {http://doi.acm.org/10.1145/2934872.2959076},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {621--622},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Capture and Replay: Reproducible Network Experiments in Mininet},
 year = {2016}
}


@inproceedings{Cohen:2016:JBS:2934872.2934883,
 abstract = {Extensive standardization and R&D efforts are dedicated to establishing secure interdomain routing. These efforts focus on two mechanisms: origin authentication with RPKI, and path validation with BGPsec. However, while RPKI is finally gaining traction, the adoption of BGPsec seems not even on the horizon due to inherent, possibly insurmountable, obstacles, including the need to replace today's routing infrastructure, the overhead of online cryptography, and meagre benefits in partial deployment. Consequently, secure interdomain routing remains a distant dream. We propose an easily deployable, modest extension to RPKI, called ``path-end validation'', which does not entail replacing/upgrading today's BGP routers nor online cryptographic operations. We show, through rigorous security analyses and extensive simulations on empirically-derived datasets, that path-end validation yields significant security benefits even in very limited partial adoption. We present an open-source, readily deployable prototype implementation of path-end validation.},
 acmid = {2934883},
 address = {New York, NY, USA},
 author = {Cohen, Avichai and Gilad, Yossi and Herzberg, Amir and Schapira, Michael},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934883},
 isbn = {978-1-4503-4193-6},
 keyword = {BGP security, RPKI, Routing security},
 link = {http://doi.acm.org/10.1145/2934872.2934883},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {342--355},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Jumpstarting BGP Security with Path-End Validation},
 year = {2016}
}


@inproceedings{Li:2016:BET:2934872.2959047,
 abstract = {The tasks of data-parallel computation jobs come up with diverse and time-varying resource requirements. The dynamic nature of task requirements brings challenges on making good scheduling decisions, due to it is hard to keep work-conserving. In this paper, we present BETS to cope with the requirement dynamics that aims at utilizing cluster resources fully. BETS employs a task model that represents for runtime task requirements, a coarse-grained task pipeline to make use of resources in a time-division multiplexing fashion, and fine-grained resource management to guarantee performance.},
 acmid = {2959047},
 address = {New York, NY, USA},
 author = {Li, Ziyang and Zhang, Yiming and Zhao, Yunxiang and Peng, Yuxing and Li, Dongsheng},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959047},
 isbn = {978-1-4503-4193-6},
 keyword = {Data-parallel jobs, Task model, Task scheduling},
 link = {http://doi.acm.org/10.1145/2934872.2959047},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {555--556},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Best Effort Task Scheduling for Data Parallel Jobs},
 year = {2016}
}


@inproceedings{Amar:2016:PIM:2934872.2959054,
 abstract = {In recent times, we have seen a proliferation of personal data. This can be attributed not just to a larger proportion of our lives moving online, but also through the rise of ubiquitous sensing through mobile and IoT devices. Alongside this surge, concerns over privacy, trust, and security are expressed more and more as different parties attempt to take advantage of this rich assortment of data. The Databox seeks to enable all the advantages of personal data analytics while at the same time enforcing **accountability** and **control** in order to protect a user's privacy. In this work, we propose and delineate a personal networked device that allows users to **collate**, **curate**, and **mediate** their personal data.},
 acmid = {2959054},
 address = {New York, NY, USA},
 author = {Amar, Yousef and Haddadi, Hamed and Mortier, Richard},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959054},
 isbn = {978-1-4503-4193-6},
 keyword = {Networks, Personal Data, Privacy},
 link = {http://doi.acm.org/10.1145/2934872.2959054},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {571--572},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Privacy-Aware Infrastructure for Managing Personal Data},
 year = {2016}
}


@inproceedings{Bernal:2016:THI:2934872.2959068,
 abstract = {This paper presents a software architecture that can dynamically and transparently establish direct communication paths between DPDK-based virtual network functions executed in virtual machines, by recognizing new point-to-point connections in traffic steering rules. We demonstrate the huge advantages of this architecture in terms of performance and the possibility to implement it with localized modifications in Open vSwitch and DPDK, without touching the VNFs.},
 acmid = {2959068},
 address = {New York, NY, USA},
 author = {Bernal, Mauricio V\'{a}squez and Cerrato, Ivano and Risso, Fulvio and Verbeiren, David},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959068},
 isbn = {978-1-4503-4193-6},
 keyword = {DPDK, NFV, Open vSwitch, performance},
 link = {http://doi.acm.org/10.1145/2934872.2959068},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {603--604},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {A Transparent Highway for inter-Virtual Network Function Communication with Open vSwitch},
 year = {2016}
}


@inproceedings{Baldi:2016:MNS:2934872.2959069,
 abstract = {Virtual Network Functions (VNFs) are often realized using virtual machines (VMs) because they provide an isolated environment compatible with classical cloud computing technologies. However, VMs are demanding in terms of required resources (CPU and memory) and therefore not suitable for low-cost devices like residential gateways. Such equipment often runs a Linux-based operating system that includes by default a (large) number of common network functions, which can provide some of the services otherwise offered by simple VNFs, but with reduced overhead. In this paper those native software components are made available through a Network Function Virtualization (NFV) platform, thus making their use transparent from the VNF developer point of view.},
 acmid = {2959069},
 address = {New York, NY, USA},
 author = {Baldi, Mario and Bonafiglia, Roberto and Risso, Fulvio and Sapio, Amedeo},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959069},
 isbn = {978-1-4503-4193-6},
 keyword = {Network Functions Virtualization, Service Orchestration, Software Defined Networks, Virtual Network Functions},
 link = {http://doi.acm.org/10.1145/2934872.2959069},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {605--606},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Modeling Native Software Components As Virtual Network Functions},
 year = {2016}
}


@inproceedings{He:2016:ATV:2934872.2934903,
 abstract = {Multi-tenant datacenters are successful because tenants can seamlessly port their applications and services to the cloud. Virtual Machine (VM) technology plays an integral role in this success by enabling a diverse set of software to be run on a unified underlying framework. This flexibility, however, comes at the cost of dealing with out-dated, inefficient, or misconfigured TCP stacks implemented in the VMs. This paper investigates if administrators can take control of a VM's TCP congestion control algorithm without making changes to the VM or network hardware. We propose AC/DC TCP, a scheme that exerts fine-grained control over arbitrary tenant TCP stacks by enforcing per-flow congestion control in the virtual switch (vSwitch). Our scheme is light-weight, flexible, scalable and can police non-conforming flows. In our evaluation the computational overhead of AC/DC TCP is less than one percentage point and we show implementing an administrator-defined congestion control algorithm in the vSwitch (i.e., DCTCP) closely tracks its native performance, regardless of the VM's TCP stack.},
 acmid = {2934903},
 address = {New York, NY, USA},
 author = {He, Keqiang and Rozner, Eric and Agarwal, Kanak and Gu, Yu (Jason) and Felter, Wes and Carter, John and Akella, Aditya},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934903},
 isbn = {978-1-4503-4193-6},
 keyword = {Congestion Control, Datacenter Networks, Virtualization},
 link = {http://doi.acm.org/10.1145/2934872.2934903},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {244--257},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {AC/DC TCP: Virtual Congestion Control Enforcement for Datacenter Networks},
 year = {2016}
}


@inproceedings{Sung:2016:RTN:2934872.2934874,
 abstract = {Network management facilitates a healthy and sustainable network. However, its practice is not well understood outside the network engineering community. In this paper, we present Robotron, a system for managing a massive production network in a top-down fashion. The system's goal is to reduce effort and errors on management tasks by minimizing direct human interaction with network devices. Engineers use Robotron to express high-level design intent, which is translated into low-level device configurations and deployed safely. Robotron also monitors devices' operational state to ensure it does not deviate from the desired state. Since 2008, Robotron has been used to manage tens of thousands of network devices connecting hundreds of thousands of servers globally at Facebook.},
 acmid = {2934874},
 address = {New York, NY, USA},
 author = {Sung, Yu-Wei Eric and Tie, Xiaozheng and Wong, Starsky H.Y. and Zeng, Hongyi},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934874},
 isbn = {978-1-4503-4193-6},
 keyword = {Facebook, Network Management, Robotron},
 link = {http://doi.acm.org/10.1145/2934872.2934874},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {426--439},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Robotron: Top-down Network Management at Facebook Scale},
 year = {2016}
}


@inproceedings{Chen:2016:SMC:2934872.2934888,
 abstract = {Cloud applications generate a mix of flows with and without deadlines. Scheduling such mix-flows is a key challenge; our experiments show that trivially combining existing schemes for deadline/non-deadline flows is problematic. For example, prioritizing deadline flows hurts flow completion time (FCT) for non-deadline flows, with minor improvement for deadline miss rate. We present Karuna, a first systematic solution for scheduling mix-flows. Our key insight is that deadline flows should meet their deadlines while minimally impacting the FCT of non-deadline flows. To achieve this goal, we design a novel Minimal-impact Congestion control Protocol (MCP) that handles deadline flows with as little bandwidth as possible. For non-deadline flows, we extend an existing FCT minimization scheme to schedule flows with known and unknown sizes. Karuna requires no switch modifications and is back- ward compatible with legacy TCP/IP stacks. Our testbed experiments and simulations show that Karuna effectively schedules mix-flows, for example, reducing the 95th percentile FCT of non-deadline flows by up to 47.78% at high load compared to pFabric, while maintaining low (<5.8%) deadline miss rate.},
 acmid = {2934888},
 address = {New York, NY, USA},
 author = {Chen, Li and Chen, Kai and Bai, Wei and Alizadeh, Mohammad},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934888},
 isbn = {978-1-4503-4193-6},
 keyword = {Datacenter networks, Deadline, Flow scheduling},
 link = {http://doi.acm.org/10.1145/2934872.2934888},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {174--187},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Scheduling Mix-flows in Commodity Datacenters with Karuna},
 year = {2016}
}


@inproceedings{Yang:2016:CCA:2934872.2959056,
 abstract = {There has always been a gap of perception between Internet Service Providers (ISPs) and their customers when considering the performance of network service. On one hand, ISPs invest to increase downstream speed of access network infrastructure. On the other hand, users cannot achieve perceived quality of experience (QoE). This paper addresses this problem by introducing a system, Conan, which enables content-aware flow scheduling to improve the QoE of users. Conan exploits to satisfy users' requirements in the access network (LAN), which is the performance bottleneck actually. By leveraging the technique of software defined networking (SDN), Conan are able to specify the expected network capacity for different applications. Automatic application identification is deployed at home gateway to improve the scalability, and flexible bandwidth allocation is realized at LAN for specified applications. Using video streaming service optimization as an example, we demonstrate that our system can automatically allocate bandwidth for video flows.},
 acmid = {2959056},
 address = {New York, NY, USA},
 author = {Yang, Haixiang and Wang, Xiaoliang and Nguyen, Cam-Tu and Lu, Sanglu},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959056},
 isbn = {978-1-4503-4193-6},
 keyword = {Dynamic Resource Allocation, QoE, SDN},
 link = {http://doi.acm.org/10.1145/2934872.2959056},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {575--576},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Conan: Content-aware Access Network Flow Scheduling to Improve QoE of Home Users},
 year = {2016}
}


@inproceedings{Tilmans:2016:FAO:2934872.2959084,
 abstract = {Video streaming, in conjunction with social networks, have given birth to a new traffic pattern over the Internet: transient, localized traffic surges, known as flash crowds. Traditional traffic-engineering methods can hardly cope with these surges, as they are unpredictable by nature. Consequently, networks either have to be over-provisioned, which is expensive and wastes resources, or risk to periodically incur congestion, which infuriates customers. This demonstration shows how Fibbing can improve network performance and preserve users’ quality of experience when accessing video streams, by implementing a fine-grained load-balancing service. This service leverages two unique features of Fibbing: programming per destination load-balancing and implementing uneven splitting ratios.},
 acmid = {2959084},
 address = {New York, NY, USA},
 author = {Tilmans, Olivier and Vissicchio, Stefano and Vanbever, Laurent and Rexford, Jennifer},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959084},
 isbn = {978-1-4503-4193-6},
 keyword = {Fibbing, Traffic engineering, Uneven load-balancing},
 link = {http://doi.acm.org/10.1145/2934872.2959084},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {619--620},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Fibbing in Action: On-demand Load-balancing for Better Video Delivery},
 year = {2016}
}


@inproceedings{Gao:2016:FSP:2934872.2960424,
 abstract = {Handling state dependencies is a major challenge in modern SDN programming, but existing frameworks do not provide sufficient abstractions nor tools to address this challenge. In this paper, we propose a novel, high-level programming abstraction and implement the *Function Automation SysTem (FAST)*. With the two key features, i.e., *automated state dependency tracking* and *efficient re-execution scheduling*, we demonstrate that FAST substantially simplifies state-dependent SDN programming and boosts the performance.},
 acmid = {2960424},
 address = {New York, NY, USA},
 author = {Gao, Kai and Gu, Chen and Xiang, Qiao and Yang, Y. Richard and Bi, Jun},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2960424},
 isbn = {978-1-4503-4193-6},
 keyword = {Programming abstraction,, SDN, State dependency},
 link = {http://doi.acm.org/10.1145/2934872.2960424},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {579--580},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {FAST: A Simple Programming Abstraction for Complex State-Dependent SDN Programming},
 year = {2016}
}


@inproceedings{Wang:2016:ADN:2934872.2959075,
 abstract = {Application Driven Network(ADN) is a new paradigm that provides on-demand differentiated services for applications. A physical network in ADN is sliced into various logically isolated sub-networks. Each network slice can have its own network architecture and protocol to serve one application exclusively. ADN enhances the user experience while keeping the resource efficiency by further imposing multiplexing among these logically isolated sub-networks.},
 acmid = {2959075},
 address = {New York, NY, USA},
 author = {Wang, Yi and Lin, Dong and Li, Changtai and Zhang, Junping and Liu, Peng and Hu, Chengchen and Zhang, Gong},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959075},
 isbn = {978-1-4503-4193-6},
 keyword = {Application Driven Network, DiffServ, NFV, SDN},
 link = {http://doi.acm.org/10.1145/2934872.2959075},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {617--618},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Application Driven Network: Providing On-Demand Services for Applications},
 year = {2016}
}


@proceedings{Barcellos:2016:2934872,
 abstract = {
                  An abstract is not available.
              },
 address = {New York, NY, USA},
 isbn = {978-1-4503-4193-6},
 location = {Florianopolis, Brazil},
 publisher = {ACM},
 title = {SIGCOMM '16: Proceedings of the 2016 ACM SIGCOMM Conference},
 year = {2016}
}


@inproceedings{Liu:2016:OSR:2934872.2934906,
 abstract = {Network management requires accurate estimates of metrics for traffic engineering (e.g., heavy hitters), anomaly detection (e.g., entropy of source addresses), and security (e.g., DDoS detection). Obtaining accurate estimates given router CPU and memory constraints is a challenging problem. Existing approaches fall in one of two undesirable extremes: (1) low fidelity general-purpose approaches such as sampling, or (2) high fidelity but complex algorithms customized to specific application-level metrics. Ideally, a solution should be both general (i.e., supports many applications) and provide accuracy comparable to custom algorithms. This paper presents UnivMon, a framework for flow monitoring which leverages recent theoretical advances and demonstrates that it is possible to achieve both generality and high accuracy. UnivMon uses an application-agnostic data plane monitoring primitive; different (and possibly unforeseen) estimation algorithms run in the control plane, and use the statistics from the data plane to compute application-level metrics. We present a proof-of-concept implementation of UnivMon using P4 and develop simple coordination techniques to provide a ``one-big-switch'' abstraction for network-wide monitoring. We evaluate the effectiveness of UnivMon using a range of trace-driven evaluations and show that it offers comparable (and sometimes better) accuracy relative to custom sketching solutions.},
 acmid = {2934906},
 address = {New York, NY, USA},
 author = {Liu, Zaoxing and Manousis, Antonis and Vorsanger, Gregory and Sekar, Vyas and Braverman, Vladimir},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934906},
 isbn = {978-1-4503-4193-6},
 keyword = {Flow Monitoring, Sketching, Streaming Algorithm},
 link = {http://doi.acm.org/10.1145/2934872.2934906},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {101--114},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {One Sketch to Rule Them All: Rethinking Network Flow Monitoring with UnivMon},
 year = {2016}
}


@inproceedings{Zhao:2016:BAN:2934872.2959059,
 abstract = {Hadoop has become the de facto standard for Big Data analytics, especially for workloads that use the MapReduce (M/R) framework. However, the lack of network awareness of the default MapReduce resource manager in Hadoop can cause unbalanced job scheduling, network bottleneck, and eventually increase the Hadoop run time if Hadoop nodes are clustered in several geographically distributed locations. In this paper, we present an application-aware network approach using software-defined networking (SDN) for distributed Hadoop clusters. We develop the SDN applications for this environment that consider network topology discovery, traffic monitoring, and flow rerouting in addition to loop avoidance mechanisms.},
 acmid = {2959059},
 address = {New York, NY, USA},
 author = {Zhao, Shuai and Sydney, Ali and Medhi, Deep},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959059},
 isbn = {978-1-4503-4193-6},
 keyword = {Application-Aware Networking, Hadoop, Software-Defined Networking},
 link = {http://doi.acm.org/10.1145/2934872.2959059},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {583--584},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Building Application-Aware Network Environments Using SDN for Optimizing Hadoop Applications},
 year = {2016}
}


@inproceedings{Zhang:2016:PCS:2934872.2959046,
 abstract = {Cross-DR WAN (Datacenter Region Wide Area Network) with various services are deployed to provide timely data information and analytics for users in a wide range of geographical locations. For its reliability and performance, data duplication synchronization is essential among different IDCs (Internet datacenters). However, this problem poses a challenge. First, data duplication requires huge amount of bandwidth whereas the bandwidth of cross-DR links and the upload/download rates of server interfaces are limited. Second, data transmissions are time sensitive, but the current network cannot complete such tasks in a timely manner. In this work, we present PieBridge, a cross-RD data duplicate transmission platform that accommodates hundreds of TBs of data generated from user applications online data analytics. We deployed PieBridge on the IDCs of Baidu and obtained promising performance results in comparison with the prevalent approaches.},
 acmid = {2959046},
 address = {New York, NY, USA},
 author = {Zhang, Yuchao and Xu, Ke and Yao, Guang and Zhang, Miao and Nie, Xiaohui},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959046},
 isbn = {978-1-4503-4193-6},
 keyword = {Cross-DR WAN, Large-scale Data Transmission},
 link = {http://doi.acm.org/10.1145/2934872.2959046},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {553--554},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {PieBridge: A Cross-DR Scale Large Data Transmission Scheduling System},
 year = {2016}
}


@inproceedings{Jiang:2016:WEW:2934872.2934882,
 abstract = {Developers deploying web applications in the cloud often need to determine how changes such as service tiers or runtime loads may affect user-perceived page load time. We devise and evaluate a systematic methodology for exploring such "what-if" questions at the time a web application is deployed. Given a website, a web request, and “whatif” scenario, with a hypothetical configuration and runtime condition, our methodology, embedded in a system called WebPerf, can estimate a distribution of end-to-end response times for the request under the “what-if” scenario. WebPerf makes three contributions: (1) automated instrumentation of web sites written with increasingly popular task parallel libraries, to capture causal call dependencies of various computation and asynchronous I/O calls; (2) an algorithm to use the call dependencies, together with online- and offlineprofiled models of various I/O calls to estimate a distribution of end-to-end latency of the request; and (3) an algorithm to optimize modeling errors by deciding how many measurements to take within a limited time. We have implemented WebPerf for Microsoft Azure. Our experiments with five real websites and seven scenarios show that the median error of WebPerf’s estimation is within 7% for all applications and scenarios.},
 acmid = {2934882},
 address = {New York, NY, USA},
 author = {Jiang, Yurong and Sivalingam, Lenin Ravindranath and Nath, Suman and Govindan, Ramesh},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934882},
 isbn = {978-1-4503-4193-6},
 keyword = {Async-Await, Dependency, Instrumentation, What-if},
 link = {http://doi.acm.org/10.1145/2934872.2934882},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {258--271},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {WebPerf: Evaluating What-If Scenarios for Cloud-hosted Web Applications},
 year = {2016}
}


@inproceedings{Jiang:2016:VII:2934872.2934907,
 abstract = {Interactive real-time streaming applications such as audio-video conferencing, online gaming and app streaming, place stringent requirements on the network in terms of delay, jitter, and packet loss. Many of these applications inherently involve client-to-client communication, which is particularly challenging since the performance requirements need to be met while traversing the public wide-area network (WAN). This is different from the typical situation of cloud-to-client communication, where the WAN can often be bypassed by moving a communication end-point to a cloud “edge”, close to the client. Can we nevertheless take advantage of cloud resources to improve the performance of real-time client-to-client streaming over the WAN? In this paper, we start by analyzing data from a large VoIP provider whose clients are spread across over 21,000 AS’es and nearly all the countries, to understand the challenges faced by interactive audio streaming in the wild. We find that while inter-AS and international paths exhibit significantly worse performance than intra-AS and domestic paths, the pattern of poor performance is nevertheless quite scattered, both temporally and spatially. So any effort to improve performance would have to be fine-grained and dynamic. Then, we turn to the idea of overlay routing, but in the context of the well-provisioned, managed network of a cloud provider rather than peer-to-peer as has been considered in past work. Such a network typically has a global footprint and peers with a large number of network providers. When the performance of a call via the direct path is predicted to be poor, the call traffic could be directed to enter the managed network close to one end point and exit it close to the other end point, thereby avoiding wide-area communication over the public Internet. We present and evaluate data-driven techniques to deciding whether to relay a call through the managed network and if so how to pick the ingress and egress relays to maximize performance, all while operating within a budget for relaying calls via the managed overlay network. We show that call performance can potentially improve by 40%-80% on average, with our techniques closely matching it.},
 acmid = {2934907},
 address = {New York, NY, USA},
 author = {Jiang, Junchen and Das, Rajdeep and Ananthanarayanan, Ganesh and Chou, Philip A. and Padmanabhan, Venkata and Sekar, Vyas and Dominique, Esbjorn and Goliszewski, Marcin and Kukoleca, Dalibor and Vafin, Renat and Zhang, Hui},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934907},
 isbn = {978-1-4503-4193-6},
 keyword = {Internet Telephony, Managed Overlay Networks, Predictive Relay Selection, Quality of Experience},
 link = {http://doi.acm.org/10.1145/2934872.2934907},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {286--299},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Via: Improving Internet Telephony Call Quality Using Predictive Relay Selection},
 year = {2016}
}


@inproceedings{Govindan:2016:EDH:2934872.2934891,
 abstract = {Maintaining the highest levels of availability for content providers is challenging in the face of scale, network evolution and complexity. Little, however, is known about failures large content providers are susceptible to, and what mechanisms they employ to ensure high availability. From a detailed analysis of over 100 high-impact failure events in a global-scale content provider encompassing several data centers and two WANs, we quantify several dimensions of availability failures. We find that failures are evenly distributed across different network types and planes, but that a large number of failures happen when a management operation is in progress within the network. We discuss some of these failures in detail, and also describe our design principles for high availability motivated by these failures, including using defense in depth, maintaining consistency across planes, failing open on large failures, carefully preventing and avoiding failures, and assessing root cause quickly. Our findings suggest that, as networks become more complicated, failures lurk everywhere, and, counter-intuitively, continuous incremental evolution of the network can, when applied together with our design principles, result in a more robust network.},
 acmid = {2934891},
 address = {New York, NY, USA},
 author = {Govindan, Ramesh and Minei, Ina and Kallahalla, Mahesh and Koley, Bikash and Vahdat, Amin},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934891},
 isbn = {978-1-4503-4193-6},
 keyword = {Availability; Control Plane; Management Plane},
 link = {http://doi.acm.org/10.1145/2934872.2934891},
 location = {Florianopolis, Brazil},
 numpages = {15},
 pages = {58--72},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Evolve or Die: High-Availability Design Principles Drawn from Googles Network Infrastructure},
 year = {2016}
}


@inproceedings{Beckett:2016:DMG:2934872.2934909,
 abstract = {We develop Propane, a language and compiler to help network operators with a challenging, error-prone task—bridging the gap between network-wide routing objectives and low-level configurations of devices that run complex, distributed protocols. The language allows operators to specify their objectives naturally, using high-level constraints on both the shape and relative preference of traffic paths. The compiler automatically translates these specifications to router-level BGP configurations, using an effective intermediate representation that compactly encodes the flow of routing information along policy-compliant paths. It guarantees that the compiled configurations correctly implement the specified policy under all possible combinations of failures. We show that Propane can effectively express the policies of datacenter and backbone networks of a large cloud provider; and despite its strong guarantees, our compiler scales to networks with hundreds or thousands of routers.},
 acmid = {2934909},
 address = {New York, NY, USA},
 author = {Beckett, Ryan and Mahajan, Ratul and Millstein, Todd and Padhye, Jitendra and Walker, David},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934909},
 isbn = {978-1-4503-4193-6},
 keyword = {BGP, Compilation, Distributed Systems, Domain-specific Language, Fault Tolerance, Propane, Synthesis},
 link = {http://doi.acm.org/10.1145/2934872.2934909},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {328--341},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Don'T Mind the Gap: Bridging Network-wide Objectives and Device-level Configurations},
 year = {2016}
}


@inproceedings{ZHANG:2016:EPB:2934872.2934901,
 abstract = {In this paper, we look at making backscatter practical for ultra-low power on-body sensors by leveraging radios on existing smartphones and wearables (e.g. WiFi and Bluetooth). The difficulty lies in the fact that in order to extract the weak backscattered signal, the system needs to deal with self-interference from the wireless carrier (WiFi or Bluetooth) without relying on built-in capability to cancel or reject the carrier interference. Frequency-shifted backscatter (or FS-Backscatter) is based on a novel idea --- the backscatter tag shifts the carrier signal to an adjacent non-overlapping frequency band (i.e. adjacent WiFi or Bluetooth band) and isolates the spectrum of the backscattered signal from the spectrum of the primary signal to enable more robust decoding. We show that this enables communication of up to 4.8 meters using commercial WiFi and Bluetooth radios as the carrier generator and receiver. We also show that we can support a range of bitrates using packet-level and bit-level decoding methods. We build on this idea and show that we can also leverage multiple radios typically present on mobile and wearable devices to construct multi-carrier or multi-receiver scenarios to improve robustness. Finally, we also address the problem of designing an ultra-low power tag that can frequency shift by 20MHz while consuming tens of micro-watts. Our results show that FS-Backscatter is practical in typical mobile and static on-body sensing scenarios while only using commodity radios and antennas.},
 acmid = {2934901},
 address = {New York, NY, USA},
 author = {ZHANG, PENGYU and Rostami, Mohammad and Hu, Pan and Ganesan, Deepak},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934901},
 isbn = {978-1-4503-4193-6},
 keyword = {Backscatter; Sensor; Wireless},
 link = {http://doi.acm.org/10.1145/2934872.2934901},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {370--383},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Enabling Practical Backscatter Communication for On-body Sensors},
 year = {2016}
}


@inproceedings{Sivaraman:2016:PTH:2934872.2934900,
 abstract = {Many algorithms for congestion control, scheduling, network measurement, active queue management, and traffic engineering require custom processing of packets in the data plane of a network switch. To run at line rate, these data-plane algorithms must be implemented in hardware. With today's switch hardware, algorithms cannot be changed, nor new algorithms installed, after a switch has been built. This paper shows how to program data-plane algorithms in a high-level language and compile those programs into low-level microcode that can run on emerging programmable line-rate switching chips. The key challenge is that many data-plane algorithms create and modify algorithmic state. To achieve line-rate programmability for stateful algorithms, we introduce the notion of a packet transaction: a sequential packet-processing code block that is atomic and isolated from other such code blocks. We have developed this idea in Domino, a C-like imperative language to express data-plane algorithms. We show with many examples that Domino provides a convenient way to express sophisticated data-plane algorithms, and show that these algorithms can be run at line rate with modest estimated chip-area overhead.},
 acmid = {2934900},
 address = {New York, NY, USA},
 author = {Sivaraman, Anirudh and Cheung, Alvin and Budiu, Mihai and Kim, Changhoon and Alizadeh, Mohammad and Balakrishnan, Hari and Varghese, George and McKeown, Nick and Licking, Steve},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934900},
 isbn = {978-1-4503-4193-6},
 keyword = {Programmable switches, stateful data-plane algorithms},
 link = {http://doi.acm.org/10.1145/2934872.2934900},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {15--28},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Packet Transactions: High-Level Programming for Line-Rate Switches},
 year = {2016}
}


@inproceedings{Lee:2016:GST:2934872.2934885,
 abstract = {In this paper, we present Datacenter Time Protocol (DTP), a clock synchronization protocol that does not use packets at all, but is able to achieve nanosecond precision. In essence, DTP uses the physical layer of network devices to implement a decentralized clock synchronization protocol. By doing so, DTP eliminates most non-deterministic elements in clock synchronization protocols. Further, DTP uses control messages in the physical layer for communicating hundreds of thousands of protocol messages without interfering with higher layer packets. Thus, DTP has virtually zero overhead since it does not add load at layers 2 or higher layers. It does require replacing network devices, which can be done incrementally. We demonstrate that the precision provided by DTP is bounded by 25.6 nanoseconds for directly connected nodes, and in general, is bounded by 4TD where D is the longest distance between any two servers in a network in terms of number of hops and T is the period of the fastest clock (≈ 6.4ns). Moreover, in software, a DTP daemon can access the DTP clock with usually better than 4T (≈ 25.6ns) precision. As a result, the end-to-end precision can be better than 4T D + 8T nanoseconds. By contrast, the precision of the state of the art protocol is not bounded: The precision is hundreds of nanoseconds when a network is idle and can decrease to hundreds of microseconds when a network is heavily congested.},
 acmid = {2934885},
 address = {New York, NY, USA},
 author = {Lee, Ki Suh and Wang, Han and Shrivastav, Vishal and Weatherspoon, Hakim},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934885},
 isbn = {978-1-4503-4193-6},
 keyword = {Datacenter Networks},
 link = {http://doi.acm.org/10.1145/2934872.2934885},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {454--467},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Globally Synchronized Time via Datacenter Networks},
 year = {2016}
}


@inproceedings{Nagaraj:2016:NFF:2934872.2934890,
 abstract = {We present xFabric, a novel datacenter transport design that provides flexible and fast bandwidth allocation control. xFabric is flexible: it enables operators to specify how bandwidth is allocated amongst contending flows to optimize for different service-level objectives such as minimizing flow completion times, weighted allocations, different notions of fairness, etc. xFabric is also very fast, it converges to the specified allocation one-to-two order of magnitudes faster than prior schemes. Underlying xFabric, is a novel distributed algorithm that uses in-network packet scheduling to rapidly solve general network utility maximization problems for bandwidth allocation. We evaluate xFabric using realistic datacenter topologies and highly dynamic workloads and show that it is able to provide flexibility and fast convergence in such stressful environments.},
 acmid = {2934890},
 address = {New York, NY, USA},
 author = {Nagaraj, Kanthi and Bharadia, Dinesh and Mao, Hongzi and Chinchali, Sandeep and Alizadeh, Mohammad and Katti, Sachin},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934890},
 isbn = {978-1-4503-4193-6},
 keyword = {Datacenters, NUM, Networking, Resource Allocation},
 link = {http://doi.acm.org/10.1145/2934872.2934890},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {188--201},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {NUMFabric: Fast and Flexible Bandwidth Allocation in Datacenters},
 year = {2016}
}


@inproceedings{Stoenescu:2016:SSS:2934872.2934881,
 abstract = {We present SymNet, a network static analysis tool based on symbolic execution. SymNet injects symbolic packets and tracks their evolution through the network. Our key novelty is SEFL, a language we designed for expressing data plane processing in a symbolic-execution friendly manner. SymNet statically analyzes an abstract data plane model that consists of the SEFL code for every node and the links between nodes. SymNet can check networks containing routers with hundreds of thousands of prefixes and NATs in seconds, while verifying packet header memory-safety and covering network functionality such as dynamic tunneling, stateful processing and encryption. We used SymNet to debug mid- dlebox interactions from the literature, to check properties of our department’s network and the Stanford backbone. Modeling network functionality is not easy. To aid users we have developed parsers that automatically generate SEFL models from router and switch tables, firewall configura- tions and arbitrary Click modular router configurations. The parsers rely on prebuilt models that are exact and fast to an- alyze. Finally, we have built an automated testing tool that combines symbolic execution and testing to check whether the model is an accurate representation of the real code.},
 acmid = {2934881},
 address = {New York, NY, USA},
 author = {Stoenescu, Radu and Popovici, Matei and Negreanu, Lorina and Raiciu, Costin},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934881},
 isbn = {978-1-4503-4193-6},
 keyword = {Data plane verification, SymNet, Symbolic execution friendly language},
 link = {http://doi.acm.org/10.1145/2934872.2934881},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {314--327},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {SymNet: Scalable Symbolic Execution for Modern Networks},
 year = {2016}
}


@inproceedings{Yiakoumis:2016:NNN:2934872.2934896,
 abstract = {Should applications receive special treatment from the network? And if so, who decides which applications are preferred? This discussion, known as net neutrality, goes beyond technology and is a hot political topic. In this paper we approach net neutrality from a user's perspective. Through user studies, we demonstrate that users do indeed want some services to receive preferential treatment; and their preferences have a heavy-tail: a one-size-fits-all approach is unlikely to work. This suggests that users should be able to decide how their traffic is treated. A crucial part to enable user preferences, is the mechanism to express them. To this end, we present network cookies, a general mechanism to express user preferences to the network. Using cookies, we prototype Boost, a user-defined fast-lane and deploy it in 161 homes.},
 acmid = {2934896},
 address = {New York, NY, USA},
 author = {Yiakoumis, Yiannis and Katti, Sachin and McKeown, Nick},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934896},
 isbn = {978-1-4503-4193-6},
 keyword = {Differentiated Services, Fast-Lanes, Net Neutrality, Network Cookies, Zero-Rating},
 link = {http://doi.acm.org/10.1145/2934872.2934896},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {483--496},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Neutral Net Neutrality},
 year = {2016}
}


@inproceedings{Rostami:2016:MOA:2934872.2959073,
 abstract = {End-to-End programmability across radio, transport and compute resources is a key enabler for the fifth generation of mobile communication networks (5G). In our work we look into how SDN can realize the required cross-domain programmability, as well as slicing of resources towards multiple clients. We present design and implementation of a hierarchical, modular and programmable orchestration architecture across radio access networks and transport networks. We demonstrate how the developed multi-domain orchestration improves the service creation as well as resource utilization across the domains using real-time monitoring.},
 acmid = {2959073},
 address = {New York, NY, USA},
 author = {Rostami, Ahmad and \"{O}hl{\'e}n, Peter and Santos, Mateus Augusto Silva and Vidal, Allan},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959073},
 isbn = {978-1-4503-4193-6},
 keyword = {5G, SDN, multi-domain orchestration, network slicing},
 link = {http://doi.acm.org/10.1145/2934872.2959073},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {613--614},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Multi-Domain Orchestration Across RAN and Transport for 5G},
 year = {2016}
}


@inproceedings{Su:2016:DPB:2934872.2959079,
 abstract = {Deep packet inspection (DPI) is widely used in content-aware network applications to detect string features. It is of vital importance to improve the DPI performance due to the ever-increasing link speed. In this demo, we propose a novel DPI architecture with a hierarchy memory structure and parallel matching engines based on memory-centric FPGA. The implemented DPI prototype is able to provide up to 60Gbps full-text string matching throughput and fast rules update speed.},
 acmid = {2959079},
 address = {New York, NY, USA},
 author = {Su, Jinshu and Chen, Shuhui and Han, Biao and Xu, Chengcheng and Wang, Xin},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959079},
 isbn = {978-1-4503-4193-6},
 keyword = {DPI, hierarchical memory, string matching},
 link = {http://doi.acm.org/10.1145/2934872.2959079},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {627--628},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {A 60Gbps DPI Prototype Based on Memory-Centric FPGA},
 year = {2016}
}


@inproceedings{Yang:2016:RDO:2934872.2959062,
 abstract = {OpenFlow, as the Software Defined Networking (SDN) primitive, provides a simple forwarding plane abstraction, which heavily relies on the fast memory inside the OpenFlow Switch (OFS). OFS components, e.g. flow table, meter table, counters, have to compete for the limited fast memory resource. As a result, only a few counting functions are defined as mandatory in the OFS specification, although a lot of SDN proposals depend on a detailed states collected by the optional counters in the specification. This fact motivates us to rethink the way to maintain counters in the OFS. We propose a new architecture called CACTI, which only consumes several registers in the fast path and moves the completed counters into the on chip RAM like cache in the slow path processor. Theoretical analysis and experiments on the prototype system demonstrated the efficiency of our architecture: CACTI is capable to achieve the throughput of 29.4-39.7M pps packets per second (pps). No RAM resource is needed any more in the fast path, instead, CACTI consumes only 0.24-0.54\% Look-Up Table and 0.35-0.43\% flip-flops compared with the entire FPGA-based OFS design in the fast path, and the unused CPU cache in the slow path.},
 acmid = {2959062},
 address = {New York, NY, USA},
 author = {Yang, Ji and Hu, Chengchen and Zheng, Peng and Wang, Ruilong and Zhang, Peng and Guan, Xiaohong},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959062},
 isbn = {978-1-4503-4193-6},
 keyword = {OpenFlow, SDN counter},
 link = {http://doi.acm.org/10.1145/2934872.2959062},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {589--590},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Rethinking the Design of OpenFlow Switch Counters},
 year = {2016}
}


@inproceedings{Chang:2016:TTF:2934872.2959051,
 abstract = {Many emerging applications drive the needs of device-free localization (DfL), in which the target can be localized without any device attached. Because of the ubiquitousness of WiFi infrastructures nowadays, the widely available Received Signal Strength (RSS) information at the WiFi Access points are commonly employed for localization purposes. However, current RSS based DfL systems have one main drawback hindering their real-life applications. That is, the RSS measurements (fingerprints) vary slowly in time even without any change in the environment and frequent updates of RSS at each location lead to a high human labor cost. In this paper, we propose an RSS based low cost DfL system named TafLoc which is able to accurately localize the target over a long time scale. To reduce the amount of human labor cost in updating the RSS fingerprints, TafLoc represents the RSS fingerprints as a matrix which has several unique properties. Based on these properties, we propose a novel fingerprint matrix reconstruction scheme to update the whole fingerprint database with just a few RSS measurements, thus the labor cost is greatly reduced. Extensive experiments illustrate the effectiveness of TafLoc, outperforming the state-of-the-art RSS based DfL systems.},
 acmid = {2959051},
 address = {New York, NY, USA},
 author = {Chang, Liqiong and Xiong, Jie and Chen, Xiaojiang and Wang, Ju and Hu, Junhao and Fang, Dingyi and Wang, Wei},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959051},
 isbn = {978-1-4503-4193-6},
 keyword = {Device Free Localization, Fine-grained, Received Signal Strength, Time Adaptive},
 link = {http://doi.acm.org/10.1145/2934872.2959051},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {563--564},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {TafLoc: Time-adaptive and Fine-grained Device-free Localization with Little Cost},
 year = {2016}
}


@inproceedings{Hamed:2016:RDM:2934872.2934905,
 abstract = {Recent years have seen a lot of work in moving distributed MIMO from theory to practice. While this prior work demonstrates the feasibility of synchronizing multiple transmitters in time, frequency, and phase, none of them deliver a full-fledged PHY capable of supporting distributed MIMO in real-time. Further, none of them can address dynamic environments or mobile clients. Addressing these challenges, requires new solutions for low-overhead and fast tracking of wireless channels, which are the key parameters of any distributed MIMO system. It also requires a software-hardware architecture that can deliver a distributed MIMO within a full-fledged 802.11 PHY, while still meeting the tight timing constraints of the 802.11 protocol. This architecture also needs to perform coordinated power control across distributed MIMO nodes, as opposed to simply letting each node perform power control as if it were operating alone. This paper describes the design and implementation of MegaMIMO 2.0, a system that achieves these goals and delivers the first real-time fully distributed 802.11 MIMO system.},
 acmid = {2934905},
 address = {New York, NY, USA},
 author = {Hamed, Ezzeldin and Rahul, Hariharan and Abdelghany, Mohammed A. and Katabi, Dina},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934905},
 isbn = {978-1-4503-4193-6},
 keyword = {Distributed MIMO, Multi-user MIMO, Wireless Networks},
 link = {http://doi.acm.org/10.1145/2934872.2934905},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {412--425},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Real-time Distributed MIMO Systems},
 year = {2016}
}


@inproceedings{ZHANG:2016:EBC:2934872.2959072,
 abstract = {We present the first low power backscatter system that can be deployed completely using commodity WiFi infrastructure. With this system, a low power tag reflects existing 802.11b transmissions from a commodity WiFi transmitter, and the backscattered signals can be decoded as a standard WiFi packet by a commodity 802.11b receiver. The key invention is a novel technique called \textbf{codeword translation}, which allows a backscatter tag to embed its information on standard 802.11b packets by just translating the original transmitted 802.11b codeword to another valid 802.11b codeword. This allows any 802.11b receiver to decode the backscattered packet, thus opening the doors for widespread deployment of low-power backscatter communication using widely available WiFi infrastructure. We show experimentally that we can achieve an uplink throughput of up to 1Mbps at ranges of up to 8m and ranges of up to 50m where it achieves a throughput of around 100Kbps, which is twice as better than the recently published passive WiFi system.},
 acmid = {2959072},
 address = {New York, NY, USA},
 author = {ZHANG, PENGYU and Bharadia, Dinesh and Joshi, Kiran and Katti, Sachin},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959072},
 isbn = {978-1-4503-4193-6},
 keyword = {Backscatter},
 link = {http://doi.acm.org/10.1145/2934872.2959072},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {611--612},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Enabling Backscatter Communication Among Commodity WiFi Radios},
 year = {2016}
}


@inproceedings{Qiao:2016:TFT:2934872.2959063,
 abstract = {SDN has become the wide area network technology, which the academic and industry most concerned about.The limited table sizes of today’s SDN switches has turned to the most prominent short planks in the network design implementation. TCAM based flow table can provide an excellent matching performance while it really costs much. Even the flow table overflow cannot be prevented by a fixed-capacity flow table. In this paper, we design FTS(Flow Table Sharing) mechanism that can improve the performance disaster caused by overflow. We demonstrate that FTS reduces both control messages quantity and RTT time by two orders of magnitude compared to current state-of-the-art OpenFlow table-miss handler.},
 acmid = {2959063},
 address = {New York, NY, USA},
 author = {Qiao, Siyi and Hu, Chengchen and Guan, Xiaohong and Zou, Jianhua},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959063},
 isbn = {978-1-4503-4193-6},
 keyword = {SDN, flowtable, overflow, table-miss},
 link = {http://doi.acm.org/10.1145/2934872.2959063},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {591--592},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Taming the Flow Table Overflow in OpenFlow Switch},
 year = {2016}
}


@inproceedings{Moshref:2016:TTP:2934872.2934879,
 abstract = {As data centers grow larger and strive to provide tight performance and availability SLAs, their monitoring infrastructure must move from passive systems that provide aggregated inputs to human operators, to active systems that enable programmed control. In this paper, we propose Trumpet, an event monitoring system that leverages CPU resources and end-host programmability, to monitor every packet and report events at millisecond timescales. Trumpet users can express many *network-wide events*, and the system efficiently detects these events using *triggers* at end-hosts. Using careful design, Trumpet can evaluate triggers by inspecting every packet at full line rate even on future generations of NICs, scale to thousands of triggers per end-host while bounding packet processing delay to a few microseconds, and report events to a controller within 10 milliseconds, even in the presence of attacks. We demonstrate these properties using an implementation of Trumpet, and also show that it allows operators to describe new network events such as detecting correlated bursts and loss, identifying the root cause of transient congestion, and detecting short-term anomalies at the scale of a data center tenant.},
 acmid = {2934879},
 address = {New York, NY, USA},
 author = {Moshref, Masoud and Yu, Minlan and Govindan, Ramesh and Vahdat, Amin},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934879},
 isbn = {978-1-4503-4193-6},
 keyword = {End-host Monitoring, Network Event Monitoring},
 link = {http://doi.acm.org/10.1145/2934872.2934879},
 location = {Florianopolis, Brazil},
 numpages = {15},
 pages = {129--143},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Trumpet: Timely and Precise Triggers in Data Centers},
 year = {2016}
}


@inproceedings{Iyer:2016:IBT:2934872.2934894,
 abstract = {We introduce inter-technology backscatter, a novel approach that transforms wireless transmissions from one technology to another, on the air. Specifically, we show for the first time that Bluetooth transmissions can be used to create Wi-Fi and ZigBee-compatible signals using backscatter communication. Since Bluetooth, Wi-Fi and ZigBee radios are widely available, this approach enables a backscatter design that works using only commodity devices. We build prototype backscatter hardware using an FPGA and experiment with various Wi-Fi, Bluetooth and ZigBee devices. Our experiments show we can create 2--11~Mbps Wi-Fi standards-compliant signals by backscattering Bluetooth transmissions. To show the generality of our approach, we also demonstrate generation of standards-complaint ZigBee signals by backscattering Bluetooth transmissions. Finally, we build proof-of-concepts for previously infeasible applications including the first contact lens form-factor antenna prototype and an implantable neural recording interface that communicate directly with commodity devices such as smartphones and watches, thus enabling the vision of Internet connected implanted devices.},
 acmid = {2934894},
 address = {New York, NY, USA},
 author = {Iyer, Vikram and Talla, Vamsi and Kellogg, Bryce and Gollakota, Shyamnath and Smith, Joshua},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934894},
 isbn = {978-1-4503-4193-6},
 keyword = {Backscatter, Implantable Devices, Internet of things},
 link = {http://doi.acm.org/10.1145/2934872.2934894},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {356--369},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Inter-Technology Backscatter: Towards Internet Connectivity for Implanted Devices},
 year = {2016}
}


@inproceedings{Sun:2016:CIV:2934872.2934898,
 abstract = {Bitrate adaptation is critical in ensuring good users’ quality-of-experience (QoE) in Internet video delivery system. Several efforts have argued that accurate throughput prediction can dramatically improve (1) initial bitrate selection for low startup delay and high initial resolution; (2) midstream bitrate adaptation for high QoE. However, prior ef- forts did not systematically quantify real-world throughput predictability or develop good prediction algorithms. To bridge this gap, this paper makes three key technical contributions: First, we analyze the throughput characteristics in a dataset with 20M+ sessions. We find: (a) Sessions sharing similar key features (e.g., ISP, region) present similar initial values and dynamical patterns; (b) There is a natural “stateful” dynamical behavior within a given session. Second, building on these insights, we develop CS2P, a better throughput prediction system. CS2P leverages data-driven approach to learn (a) clusters of similar sessions, (b) an initial throughput predictor, and (c) a Hidden-Markov-Model based midstream predictor modeling the stateful evolution of throughput. Third, we develop a prototype system and show by trace-driven simulation and real-world experiments that CS2P outperforms state-of-art by 40% and 50% median pre- diction error respectively for initial and midstream through- put and improves QoE by 14% over buffer-based adaptation algorithm.},
 acmid = {2934898},
 address = {New York, NY, USA},
 author = {Sun, Yi and Yin, Xiaoqi and Jiang, Junchen and Sekar, Vyas and Lin, Fuyuan and Wang, Nanshu and Liu, Tao and Sinopoli, Bruno},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934898},
 isbn = {978-1-4503-4193-6},
 keyword = {Bitrate Adaptation, Dynamic Adaptive Streaming over HTTP (DASH), Internet Video, TCP, Throughput Prediction},
 link = {http://doi.acm.org/10.1145/2934872.2934898},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {272--285},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {CS2P: Improving Video Bitrate Selection and Adaptation with Data-Driven Throughput Prediction},
 year = {2016}
}


@inproceedings{Hu:2016:BIA:2934872.2934902,
 abstract = {While many radio technologies are available for mobile devices, none of them are designed to deal with asymmetric available energy. Battery capacities of mobile devices vary by up to three orders of magnitude between laptops and wearables, and our inability to deal with such asymmetry has limited the lifetime of constrained portable devices. This paper presents a radically new design for low-power radios --- one that is capable of dynamically splitting the power burden of communication between the transmitter and receiver in proportion to the available energy on the two devices. We achieve this with a novel carrier offload method that dynamically moves carrier generation across end points. While such a design might raise the specter of a high-power, large form-factor radio, we show that this integration can be achieved with no more than a BLE-style active radio augmented with a few additional components. Our design, Braidio is a low-power, tightly integrated, low-cost radio capable of operating as an active and passive transceiver. When these modes operate in an interleaved (braided) manner, the end result is a power-proportional low-power radio that is able to achieve 1:2546 to 3546:1 power consumption ratios between a transmitter and a receiver, all while operating at low power.},
 acmid = {2934902},
 address = {New York, NY, USA},
 author = {Hu, Pan and Zhang, Pengyu and Rostami, Mohammad and Ganesan, Deepak},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934902},
 isbn = {978-1-4503-4193-6},
 keyword = {Backscatter; Wireless; Architecture; Asymmetric; Energy},
 link = {http://doi.acm.org/10.1145/2934872.2934902},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {384--397},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Braidio: An Integrated Active-Passive Radio for Mobile Devices with Asymmetric Energy Budgets},
 year = {2016}
}


@inproceedings{Jeong:2016:LAI:2934872.2960423,
 abstract = {The Invisible Internet Project (I2P) is an overlay network that provides secure and anonymous communication channels. EepSites are the anonymous websites hosted in the I2P network. To access the eepSites, DNS requests of a domain name suffixed with the {\sf .i2p} pseudo top-level domain (TLD) are routed within the I2P network. However, not only that {\sf .i2p} queries are leaking in the public DNS infrastructure, but also such leakage has various plausible root causes and implications that are different from other related leakage. In this paper, we analyze the leaked {\sf .i2p} requests captured in the A and J root name servers of the public DNS, showing that a large number of queries are observed and outlining various potential directions of addressing such leakage.},
 acmid = {2960423},
 address = {New York, NY, USA},
 author = {Jeong, Seong Hoon and Kang, Ah Reum and Kim, Joongheon and Kim, Huy Kang and Mohaisen, Aziz},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2960423},
 isbn = {978-1-4503-4193-6},
 keyword = {DNS, I2P, Network Analysis, Privacy, Security},
 link = {http://doi.acm.org/10.1145/2934872.2960423},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {557--558},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {A Longitudinal Analysis of .I2P Leakage in the Public DNS Infrastructure},
 year = {2016}
}


@inproceedings{Edmundson:2016:FLT:2934872.2959081,
 abstract = {An increasing number of countries are passing laws that facilitate the mass surveillance of their citizens. In response, governments and citizens are increasingly paying attention to the countries that their Internet traffic traverses. In some cases, countries are taking extreme steps, such as building new IXPs and encouraging local interconnection to keep local traffic local. We find that although many of these efforts are extensive, they are often futile, due to the inherent lack of hosting and route diversity for many popular sites. We investigate how the use of overlay network relays and the DNS open resolver infrastructure can prevent traffic from traversing certain jurisdictions.},
 acmid = {2959081},
 address = {New York, NY, USA},
 author = {Edmundson, Anne and Ensafi, Roya and Feamster, Nick and Rexford, Jennifer},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959081},
 isbn = {978-1-4503-4193-6},
 keyword = {routing, surveillance},
 link = {http://doi.acm.org/10.1145/2934872.2959081},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {567--568},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {A First Look into Transnational Routing Detours},
 year = {2016}
}


@inproceedings{Sun:2016:SSH:2934872.2959058,
 abstract = {We propose SLA-NFV, a Service Level Agreement (SLA) aware framework, for building high-performance NFV, focusing on fulfilling SLAs of service subscribers (or tenants). SLA-NFV leverages a hybrid infrastructure with both software and programmable hardware to enhance NFV’s capability with respect to various SLAs. Evaluations show that a hybrid service chain could reduce latency by up to 60% compared with a pure soft- ware service chain.},
 acmid = {2959058},
 address = {New York, NY, USA},
 author = {Sun, Chen and Bi, Jun and Zheng, Zhilong and Hu, Hongxin},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959058},
 isbn = {978-1-4503-4193-6},
 keyword = {High Performance, Hybrid Infrastructure, NFV, SLA},
 link = {http://doi.acm.org/10.1145/2934872.2959058},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {581--582},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {SLA-NFV: An SLA-aware High Performance Framework for Network Function Virtualization},
 year = {2016}
}


@inproceedings{Li:2016:MSC:2934872.2959061,
 abstract = {Software Defined Networking (SDN) is evolving to such a phase that multiple programming languages and rule specifications coexist. However, current SDN compilers are closely bound to both languages and rules, thus disable the interoperability and compatibility of SDN programs. To solve this problem, we propose to modularize the SDN compiler by leveraging intermediate representation (IR), a common technique for computer compiler design. Specifically, we introduce Semantic Rule (SR) as the first IR for SDN compilers, which is a simple, language-independent, and semantic-preserving representation. We develop two optimizations on the semantic rule to coordinate cross-language programs in a single network and compress the number of compiled rules. We implement a modular compiler prototype with the proposed SR, and demonstrate that RYU programs can run at both OpenFlow and POF network. With synthetic network configurations, we demonstrate that the optimizations on SRs are effective, efficient and scalable.},
 acmid = {2959061},
 address = {New York, NY, USA},
 author = {Li, Hao and Hu, Chengchen and Zhang, Peng and Xie, Lei},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959061},
 isbn = {978-1-4503-4193-6},
 keyword = {Intermediate representation, Software-Defined Networks},
 link = {http://doi.acm.org/10.1145/2934872.2959061},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {587--588},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Modular SDN Compiler Design with Intermediate Representation},
 year = {2016}
}


@inproceedings{Chen:2016:GBD:2934872.2934910,
 abstract = {In this paper, we propose a new approach to diagnosing problems in complex distributed systems. Our approach is based on the insight that many of the trickiest problems are anomalies. For instance, in a network, problems often affect only a small fraction of the traffic (e.g., perhaps a certain subnet), or they only manifest infrequently. Thus, it is quite common for the operator to have “examples” of both working and non-working traffic readily available – perhaps a packet that was misrouted, and a similar packet that was routed correctly. In this case, the cause of the problem is likely to be wherever the two packets were treated differently by the network. We present the design of a debugger that can leverage this information using a novel concept that we call differential provenance. Differential provenance tracks the causal connections between network states and state changes, just like classical provenance, but it can additionally perform root-cause analysis by reasoning about the differences between two provenance trees. We have built a diagnostic tool that is based on differential provenance, and we have used our tool to debug a number of complex, realistic problems in two scenarios: software-defined networks and MapReduce jobs. Our results show that differential provenance can be maintained at relatively low cost, and that it can deliver very precise diagnostic information; in many cases, it can even identify the precise root cause of the problem.},
 acmid = {2934910},
 address = {New York, NY, USA},
 author = {Chen, Ang and Wu, Yang and Haeberlen, Andreas and Zhou, Wenchao and Loo, Boon Thau},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934910},
 isbn = {978-1-4503-4193-6},
 keyword = {Debugging, Network diagnostics, Provenance},
 link = {http://doi.acm.org/10.1145/2934872.2934910},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {115--128},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {The Good, the Bad, and the Differences: Better Network Diagnostics with Differential Provenance},
 year = {2016}
}


@inproceedings{Li:2016:CHF:2934872.2934897,
 abstract = {Highly flexible software network functions (NFs) are crucial components to enable multi-tenancy in the clouds. However, software packet processing on a commodity server has limited capacity and induces high latency. While software NFs could scale out using more servers, doing so adds significant cost. This paper focuses on accelerating NFs with programmable hardware, i.e., FPGA, which is now a mature technology and inexpensive for datacenters. However, FPGA is predominately programmed using low-level hardware description languages (HDLs), which are hard to code and difficult to debug. More importantly, HDLs are almost inaccessible for most software programmers. This paper presents ClickNP, a FPGA-accelerated platform for highly flexible and high-performance NFs with commodity servers. ClickNP is highly flexible as it is completely programmable using high-level C-like languages, and exposes a modular programming abstraction that resembles Click Modular Router. ClickNP is also high performance. Our prototype NFs show that they can process traffic at up to 200 million packets per second with ultra-low latency ($< 2\mu$s). Compared to existing software counterparts, with FPGA, ClickNP improves throughput by 10x, while reducing latency by 10x. To the best of our knowledge, ClickNP is the first FPGA-accelerated platform for NFs, written completely in high-level language and achieving 40 Gbps line rate at any packet size.},
 acmid = {2934897},
 address = {New York, NY, USA},
 author = {Li, Bojie and Tan, Kun and Luo, Layong (Larry) and Peng, Yanqing and Luo, Renqian and Xu, Ningyi and Xiong, Yongqiang and Cheng, Peng and Chen, Enhong},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934897},
 isbn = {978-1-4503-4193-6},
 keyword = {Compiler, FPGA, Network Function Virtualization, Reconfigurable Hardware},
 link = {http://doi.acm.org/10.1145/2934872.2934897},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {1--14},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {ClickNP: Highly Flexible and High Performance Network Processing with Reconfigurable Hardware},
 year = {2016}
}


@inproceedings{Molnar:2016:DSH:2934872.2934887,
 abstract = {OpenFlow is an amazingly expressive dataplane programming language, but this expressiveness comes at a severe performance price as switches must do excessive packet classification in the fast path. The prevalent OpenFlow software switch architecture is therefore built on flow caching, but this imposes intricate limitations on the workloads that can be supported efficiently and may even open the door to malicious cache overflow attacks. In this paper we argue that instead of enforcing the same universal flow cache semantics to all OpenFlow applications and optimize for the common case, a switch should rather automatically specialize its dataplane piecemeal with respect to the configured workload. We introduce ESwitch, a novel switch architecture that uses on-the-fly template-based code generation to compile any OpenFlow pipeline into efficient machine code, which can then be readily used as fast path. We present a proof-of-concept prototype and we demonstrate on illustrative use cases that ESwitch yields a simpler architecture, superior packet processing speed, improved latency and CPU scalability, and predictable performance. Our prototype can easily scale beyond 100 Gbps on a single Intel blade even with complex OpenFlow pipelines.},
 acmid = {2934887},
 address = {New York, NY, USA},
 author = {Moln\'{a}r, L\'{a}szl\'{o} and Pongr\'{a}cz, Gergely and Enyedi, G\'{a}bor and Kis, Zolt\'{a}n Lajos and Csikor, Levente and Juh\'{a}sz, Ferenc and K\H{o}r\"{o}si, Attila and R{\'e}tv\'{a}ri, G\'{a}bor},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934887},
 isbn = {978-1-4503-4193-6},
 keyword = {OpenFlow software switching, packet classification, template-based code generation},
 link = {http://doi.acm.org/10.1145/2934872.2934887},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {539--552},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Dataplane Specialization for High-performance OpenFlow Software Switching},
 year = {2016}
}


@inproceedings{Fernandes:2016:HTS:2934872.2959082,
 abstract = {The Software Defined Networking (SDN) paradigm can be successfully applied to the inter-domain ecosystem to empower network fabrics with finer grained policies and traffic engineering capabilities. However, introducing SDN at the inter-domain level might also lead to misconfigurations with potential to negatively impact on the Internet. Simulators are a popular approach to verify network behaviour and test applications before going into production. In the case of SDN, the available options do not scale for large scale networks nor high traffic loads. In this paper we propose a new simulator to foster SDN research and improve our understanding on the impact of the new use cases over the traffic flow. A simulation tool capable of efficiently reproducing large scale networks, high traffic loads, and policies, by abstracting the interactions between switches and controllers of the SDN network.},
 acmid = {2959082},
 address = {New York, NY, USA},
 author = {Fernandes, Eder Le\~{a}o and Antichi, Gianni and Castro, Ignacio and Uhlig, Steve},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959082},
 isbn = {978-1-4503-4193-6},
 keyword = {Software Defined Networking; simulation},
 link = {http://doi.acm.org/10.1145/2934872.2959082},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {577--578},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Horse: Towards an SDN Traffic Dynamics Simulator for Large Scale Networks},
 year = {2016}
}


@inproceedings{Patra:2016:MMC:2934872.2959077,
 abstract = {Software Defined Networking (SDN) strives for deep programmable hardware and software dataplanes without giving up on performance. Domain Specific Languages (DSL) such as P4 seek to provide top-down high-level capabilities to define the datapath pipeline agnostic to the network platform and independent from any network protocols. At the crossroads, bottom-up industry efforts at the OpenDataPlane (ODP) initiative are pursuing open-source multiarchitecture APIs for dataplane programmability across various networking platforms. Towards P4 code reuse for various targets (portability), we propose MACSAD as a compiler system that brings together the higher-level P4 language and the abstract, target-independent ODP APIs. The demo showcases two P4 applications compiled into heterogeneous datapath platforms supporting ODP.},
 acmid = {2959077},
 address = {New York, NY, USA},
 author = {Patra, P Gyanesh and Rothenberg, Christian Esteve and Pongr\'{a}cz, Gergely},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959077},
 isbn = {978-1-4503-4193-6},
 keyword = {OpenDataPlane, P4, Software Defined Networking},
 link = {http://doi.acm.org/10.1145/2934872.2959077},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {623--624},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {MACSAD: Multi-Architecture Compiler System for Abstract Dataplanes (Aka Partnering P4 with ODP)},
 year = {2016}
}


@inproceedings{Laki:2016:HSP:2934872.2959080,
 abstract = {P4 is a high level language for programming network switches that allows for great flexibility in the description of packet structure and processing, independent of the specifics of the underlying hardware. In this demo, we present our prototype P4 compiler in which the hardware independent and hardware specific functionalities are separated. We have identified the requisites of the latter, which form the interface of our target specific Hardware Abstraction Library (HAL); the compiler turns P4 code into a target independent core program that is linked to this library and invokes its operations. The two stage separation improves portability: to support a new architecture, only the hardware dependent library has to be implemented. In the demo, we demonstrate the flexibility of our compiler with a HAL for Intel DPDK, and show the packet processing and forwarding performance of compiled switches in different scenarios.},
 acmid = {2959080},
 address = {New York, NY, USA},
 author = {Laki, S\'{a}ndor and Horp\'{a}csi, D\'{a}niel and V\"{o}r\"{o}s, P{\'e}ter and Kitlei, R\'{o}bert and Lesk\'{o}, D\'{a}niel and Tejfel, M\'{a}t{\'e}},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959080},
 isbn = {978-1-4503-4193-6},
 keyword = {P4, Packet forwarding, Programmable data plane, SDN},
 link = {http://doi.acm.org/10.1145/2934872.2959080},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {629--630},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {High Speed Packet Forwarding Compiled from Protocol Independent Data Plane Specifications},
 year = {2016}
}


@inproceedings{Jin:2016:OBT:2934872.2934904,
 abstract = {Bulk transfer on the wide-area network (WAN) is a fundamental service to many globally-distributed applications. It is challenging to efficiently utilize expensive WAN bandwidth to achieve short transfer completion time and meet mission-critical deadlines. Advancements in software-defined networking (SDN) and optical hardware make it feasible and beneficial to quickly reconfigure optical devices in the optical layer, which brings a new opportunity for traffic management on the WAN. We present Owan, a novel traffic management system that optimizes wide-area bulk transfers with centralized joint control of the optical and network layers. \sysname can dynamically change the network-layer topology by reconfiguring the optical devices. We develop efficient algorithms to jointly optimize optical circuit setup, routing and rate allocation, and dynamically adapt them to traffic demand changes. We have built a prototype of Owan with commodity optical and electrical hardware. Testbed experiments and large-scale simulations on two ISP topologies and one inter-DC topology show that \sysname completes transfers up to 4.45x faster on average, and up to 1.36x more transfers meet their deadlines, as compared to prior methods that only control the network layer.},
 acmid = {2934904},
 address = {New York, NY, USA},
 author = {Jin, Xin and Li, Yiran and Wei, Da and Li, Siming and Gao, Jie and Xu, Lei and Li, Guangzhi and Xu, Wei and Rexford, Jennifer},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934904},
 isbn = {978-1-4503-4193-6},
 keyword = {Software-defined networking, bulk transfers, cross-layer network management, optical networks, wide area networks},
 link = {http://doi.acm.org/10.1145/2934872.2934904},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {87--100},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Optimizing Bulk Transfers with Software-Defined Optical WAN},
 year = {2016}
}


@inproceedings{Arashloo:2016:SSN:2934872.2934892,
 abstract = {Early programming languages for software-defined networking (SDN) were built on top of the simple match-action paradigm offered by OpenFlow 1.0. However, emerging hardware and software switches offer much more sophisticated support for persistent state in the data plane, without involving a central controller. Nevertheless, managing stateful, distributed systems efficiently and correctly is known to be one of the most challenging programming problems. To simplify this new SDN problem, we introduce SNAP. SNAP offers a simpler "centralized" stateful programming model, by allowing programmers to develop programs on top of one big switch rather than many. These programs may contain reads and writes to global, persistent arrays, and as a result, programmers can implement a broad range of applications, from stateful firewalls to fine-grained traffic monitoring. The SNAP compiler relieves programmers of having to worry about how to distribute, place, and optimize access to these stateful arrays by doing it all for them. More specifically, the compiler discovers read/write dependencies between arrays and translates one-big-switch programs into an efficient internal representation based on a novel variant of binary decision diagrams. This internal representation is used to construct a mixed-integer linear program, which jointly optimizes the placement of state and the routing of traffic across the underlying physical topology. We have implemented a prototype compiler and applied it to about 20 SNAP programs over various topologies to demonstrate our techniques' scalability.},
 acmid = {2934892},
 address = {New York, NY, USA},
 author = {Arashloo, Mina Tahmasbi and Koral, Yaron and Greenberg, Michael and Rexford, Jennifer and Walker, David},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934892},
 isbn = {978-1-4503-4193-6},
 keyword = {Network Programming Language, One Big Switch, Optimization, SNAP, Software Defined Networks, Stateful Packet Processing},
 link = {http://doi.acm.org/10.1145/2934872.2934892},
 location = {Florianopolis, Brazil},
 numpages = {15},
 pages = {29--43},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {SNAP: Stateful Network-Wide Abstractions for Packet Processing},
 year = {2016}
}


@inproceedings{Bremler-Barr:2016:OSF:2934872.2934875,
 abstract = {We present OpenBox — a software-defined framework for network-wide development, deployment, and management of network functions (NFs). OpenBox effectively decouples the control plane of NFs from their data plane, similarly to SDN solutions that only address the network’s forwarding plane. OpenBox consists of three logic components. First, user-defined OpenBox applications provide NF specifications through the OpenBox north-bound API. Second, a logically-centralized OpenBox controller is able to merge logic of multiple NFs, possibly from multiple tenants, and to use a network-wide view to efficiently deploy and scale NFs across the network data plane. Finally, OpenBox instances constitute OpenBox’s data plane and are implemented either purely in software or contain specific hardware accelerators (e.g., a TCAM). In practice, different NFs carry out similar processing steps on the same packet, and our experiments indeed show a significant improvement of the network performance when using OpenBox. Moreover, OpenBox readily supports smart NF placement, NF scaling, and multi-tenancy through its controller.},
 acmid = {2934875},
 address = {New York, NY, USA},
 author = {Bremler-Barr, Anat and Harchol, Yotam and Hay, David},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934875},
 isbn = {978-1-4503-4193-6},
 keyword = {Middleboxes, Network functions, Software-Defined Networks},
 link = {http://doi.acm.org/10.1145/2934872.2934875},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {511--524},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {OpenBox: A Software-Defined Framework for Developing, Deploying, and Managing Network Functions},
 year = {2016}
}


@inproceedings{Li:2016:PEL:2934872.2959050,
 abstract = {The \emph{Locator/Identifier Separation Protocol} (LISP) introduces several benefits to the Internet architecture, yet, since it is just in the initial deployment stage, comprehensive understanding of its integration performance with legacy Internet becomes essential. We leverage on RIPE Atlas, the largest Internet measurement infrastructure, to conduct large scale measurements analysis to provide the feedback to improve LISP technology. The preliminary evaluations show that LISP generally has a reliable performance, compared with the existing Internet. From our vantage point, we observe that LISP introduces a non-negligible latency for the European and North American destinations, occasionally some extremely large delay, however, it shows a faster connection for the Asian intercontinental transmission.},
 acmid = {2959050},
 address = {New York, NY, USA},
 author = {Li, Yue and Iannone, Luigi},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959050},
 isbn = {978-1-4503-4193-6},
 keyword = {LISP, RIPE Atlas, experimentation, measurement},
 link = {http://doi.acm.org/10.1145/2934872.2959050},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {561--562},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Performance Evaluation of Locator/Identifier Separation Protocol Through RIPE Atlas},
 year = {2016}
}


@inproceedings{Wang:2016:ACS:2934872.2959060,
 abstract = {Software-defined networking enables applications act as blackboxes independently to control the network flexibly. However, these independent applications may generate conflicting control decisions. To reconcile applications automatically and dynamically, we implement control applications with Prolog, which enables applications to execute jointly to make consistent control decisions. When conflicts occur, we design a compromise algorithm by sacrificing a subset of applications to maximize the desired control objectives.},
 acmid = {2959060},
 address = {New York, NY, USA},
 author = {Wang, Wen and Liu, Cong and Su, Jinshu and He, Wenbo},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959060},
 isbn = {978-1-4503-4193-6},
 keyword = {Network Control Consistency, Software-Defined Networking},
 link = {http://doi.acm.org/10.1145/2934872.2959060},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {585--586},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Achieving Consistent SDN Control With Declarative Applications},
 year = {2016}
}


@inproceedings{Voellmy:2016:MGM:2934872.2959064,
 abstract = {Despite the emergence of multi-table pipelining as a key feature of next-generation SDN data-path models, there is no existing work that addresses the substantial programming challenge of utilizing multi-tables automatically. In this paper, we present Magellan, the first system that addresses the aforementioned challenge. Introducing two novel, substantial algorithms, map-explore and table-design, Magellan achieves automatic derivation and population of multi-table pipelines from a datapath-oblivious, high-level SDN program written in a general-purpose language. Comparing the flow tables generated by Magellan with those produced by standard SDN controllers including OpenDaylight and Floodlight, we show that Magellan uses between 46-68x fewer rules.},
 acmid = {2959064},
 address = {New York, NY, USA},
 author = {Voellmy, Andreas and Chen, Shenshen and Wang, Xin and Yang, Y. Richard},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959064},
 isbn = {978-1-4503-4193-6},
 keyword = {Multi-table pipeline, Programming model, SDN},
 link = {http://doi.acm.org/10.1145/2934872.2959064},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {593--594},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Magellan: Generating Multi-Table Datapath from Datapath Oblivious Algorithmic SDN Policies},
 year = {2016}
}


@inproceedings{Flach:2016:IAT:2934872.2934873,
 abstract = {Large flows like videos consume significant bandwidth. Some ISPs actively manage these high volume flows with techniques like policing, which enforces a flow rate by dropping excess traffic. While the existence of policing is well known, our contribution is an Internet-wide study quantifying its prevalence and impact on video quality metrics. We developed a heuristic to identify policing from server-side traces and built a pipeline to deploy it at scale on traces from a large online content provider, collected from hundreds of servers worldwide. Using a dataset of 270 billion packets served to 28,400 client ASes, we find that, depending on region, up to 7% of lossy transfers are policed. Loss rates are on average six times higher when a trace is policed, and it impacts video playback quality. We show that alternatives to policing, like pacing and shaping, can achieve traffic management goals while avoiding the deleterious effects of policing.},
 acmid = {2934873},
 address = {New York, NY, USA},
 author = {Flach, Tobias and Papageorge, Pavlos and Terzis, Andreas and Pedrosa, Luis and Cheng, Yuchung and Karim, Tayeb and Katz-Bassett, Ethan and Govindan, Ramesh},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934873},
 isbn = {978-1-4503-4193-6},
 keyword = {Network measurement, TCP, Traffic policing, Traffic shaping},
 link = {http://doi.acm.org/10.1145/2934872.2934873},
 location = {Florianopolis, Brazil},
 numpages = {15},
 pages = {468--482},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {An Internet-Wide Analysis of Traffic Policing},
 year = {2016}
}


@inproceedings{Gember-Jacobson:2016:FCP:2934872.2934876,
 abstract = {Networks employ complex, and hence error-prone, routing control plane configurations. In many cases, the impact of errors manifests only under failures and leads to devastating effects. Thus, it is important to proactively verify control plane behavior under arbitrary link failures. State-of-the-art verifiers are either too slow or impractical to use for such verification tasks. In this paper we propose a new high level abstraction for control planes, ARC, that supports fast control plane analyses under arbitrary failures. ARC can check key invariants without generating the data plane--which is the main reason for current tools' ineffectiveness. This is possible because of the nature of verification tasks and the constrained nature of control plane designs in networks today. We develop algorithms to derive a network's ARC from its configuration files. Our evaluation over 314 networks shows that ARC computation is quick, and that ARC can verify key invariants in under 1s in most cases, which is orders-of-magnitude faster than the state-of-the-art.},
 acmid = {2934876},
 address = {New York, NY, USA},
 author = {Gember-Jacobson, Aaron and Viswanathan, Raajay and Akella, Aditya and Mahajan, Ratul},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934876},
 isbn = {978-1-4503-4193-6},
 keyword = {Network verification, abstract representation, control plane},
 link = {http://doi.acm.org/10.1145/2934872.2934876},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {300--313},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Fast Control Plane Analysis Using an Abstract Representation},
 year = {2016}
}


@inproceedings{McCauley:2016:DL:2934872.2934877,
 abstract = {A major staple of layer 2 has long been the combination of flood-and-learn Ethernet switches with some variant of the Spanning Tree Protocol. However, STP has significant shortcomings -- chiefly, that it throws away network capacity by removing links, and that it can be relatively slow to reconverge after topology changes. In recent years, attempts to rectify these shortcomings have been made by either making L2 look more like L3 (notably TRILL and SPB, which both incorporate L3-like routing) or by replacing L2 switches with "L3 switching" hardware and extending IP all the way to the host. In this paper, we examine an alternate point in the L2 design space, which is simple (in that it is a single data plane mechanism with no separate control plane), converges quickly, delivers packets during convergence, utilizes all available links, and can be extended to support both equal-cost multipath and efficient multicast.},
 acmid = {2934877},
 address = {New York, NY, USA},
 author = {McCauley, James and Zhao, Mingjie and Jackson, Ethan J. and Raghavan, Barath and Ratnasamy, Sylvia and Shenker, Scott},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934877},
 isbn = {978-1-4503-4193-6},
 keyword = {L2 routing, spanning tree},
 link = {http://doi.acm.org/10.1145/2934872.2934877},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {497--510},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {The Deforestation of L2},
 year = {2016}
}


@inproceedings{Zhang:2016:CTA:2934872.2934880,
 abstract = {Leveraging application-level requirements using coflows has recently been shown to improve application-level communication performance in data-parallel clusters. However, existing coflow-based solutions rely on modifying applications to extract coflows, making them inapplicable to many practical scenarios. In this paper, we present CODA, a first attempt at automatically identifying and scheduling coflows without any application-level modifications. We employ an incremental clustering algorithm to perform fast, application-transparent coflow identification and complement it by proposing an error-tolerant coflow scheduler to mitigate occasional identification errors. Testbed experiments and large-scale simulations with production workloads show that CODA can identify coflows with over 90% accuracy, and its scheduler is robust to inaccuracies, enabling communication stages to complete 2.4x (5.1x) faster on average (95-th percentile) compared to per-flow mechanisms. Overall, CODA's performance is comparable to that of solutions requiring application modifications.},
 acmid = {2934880},
 address = {New York, NY, USA},
 author = {Zhang, Hong and Chen, Li and Yi, Bairen and Chen, Kai and Chowdhury, Mosharaf and Geng, Yanhui},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934880},
 isbn = {978-1-4503-4193-6},
 keyword = {Coflow;, data-intensive applications;, datacenter networks},
 link = {http://doi.acm.org/10.1145/2934872.2934880},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {160--173},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {CODA: Toward Automatically Identifying and Scheduling Coflows in the Dark},
 year = {2016}
}


@inproceedings{Shahbaz:2016:PPP:2934872.2934886,
 abstract = {Hypervisors use software switches to steer packets to and from virtual machines (VMs). These switches frequently need upgrading and customization—to support new protocol headers or encapsulations for tunneling and overlays, to improve measurement and debugging features, and even to add middlebox-like functions. Software switches are typically based on a large body of code, including kernel code, and changing the switch is a formidable undertaking requiring domain mastery of network protocol design and developing, testing, and maintaining a large, complex codebase. Changing how a software switch forwards packets should not require intimate knowledge of its implementation. Instead, it should be possible to specify how packets are processed and forwarded in a high-level domain-specific language (DSL) such as P4, and compiled to run on a software switch. We present PISCES, a software switch derived from Open vSwitch (OVS), a hard-wired hypervisor switch, whose behavior is customized using P4. PISCES is not hard-wired to specific protocols; this independence makes it easy to add new features. We also show how the compiler can analyze the high-level specification to optimize forwarding performance. Our evaluation shows that PISCES performs comparably to OVS and that PISCES programs are about 40 times shorter than equivalent changes to OVS source code.},
 acmid = {2934886},
 address = {New York, NY, USA},
 author = {Shahbaz, Muhammad and Choi, Sean and Pfaff, Ben and Kim, Changhoon and Feamster, Nick and McKeown, Nick and Rexford, Jennifer},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934886},
 isbn = {978-1-4503-4193-6},
 keyword = {Compiler Optimizations, Domain-Specific Languages (DSL), OVS, P4, PISCES, Programmable Data Planes, Software Switch, Software-Defined Networks (SDN)},
 link = {http://doi.acm.org/10.1145/2934872.2934886},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {525--538},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {PISCES: A Programmable, Protocol-Independent Software Switch},
 year = {2016}
}


@inproceedings{Singh:2016:PPP:2934872.2959053,
 abstract = {Path prediction on the Internet has been a topic of research in the networking community for close to a decade. Applications of path prediction solutions have ranged from optimizing selection of peers in peer- to-peer networks to improving and debugging CDN predictions. Recently, revelations of traffic correlation and surveillance on the Internet have raised the topic of path prediction in the context of network security. Specifically, predicting network paths can allow us to identify and avoid given organizations on network paths (e.g., to avoid traffic correlation attacks in Tor) or to infer the impact of hijacks and interceptions when direct measurements are not available. In this poster we propose the design and implementation of PathCache which aims to reuse measurement data to estimate AS level paths on the Internet. Unlike similar systems, PathCache does not assume that routing on the Internet is destination based. Instead, we develop an algorithm to compute confidence in paths between ASes. These multiple paths ranked by their confidence values are returned to the user.},
 acmid = {2959053},
 address = {New York, NY, USA},
 author = {Singh, Rachee and Gill, Phillipa},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959053},
 isbn = {978-1-4503-4193-6},
 keyword = {Internet Measurement},
 link = {http://doi.acm.org/10.1145/2934872.2959053},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {569--570},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {PathCache: A Path Prediction Toolkit},
 year = {2016}
}


@inproceedings{Arzani:2016:TBG:2934872.2934884,
 abstract = {Today, root cause analysis of failures in data centers is mostly done through manual inspection. More often than not, cus- tomers blame the network as the culprit. However, other components of the system might have caused these failures. To troubleshoot, huge volumes of data are collected over the entire data center. Correlating such large volumes of diverse data collected from different vantage points is a daunting task even for the most skilled technicians. In this paper, we revisit the question: how much can you infer about a failure in the data center using TCP statistics collected at one of the endpoints? Using an agent that cap- tures TCP statistics we devised a classification algorithm that identifies the root cause of failure using this information at a single endpoint. Using insights derived from this classi- fication algorithm we identify dominant TCP metrics that indicate where/why problems occur in the network. We val- idate and test these methods using data that we collect over a period of six months in a production data center.},
 acmid = {2934884},
 address = {New York, NY, USA},
 author = {Arzani, Behnaz and Ciraci, Selim and Loo, Boon Thau and Schuster, Assaf and Outhred, Geoff},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934884},
 isbn = {978-1-4503-4193-6},
 keyword = {Network manageability,, Network monitoring,, Network performance analysis,, Network reliability,, Network transport protocols,},
 link = {http://doi.acm.org/10.1145/2934872.2934884},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {440--453},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Taking the Blame Game out of Data Centers Operations with NetPoirot},
 year = {2016}
}


@inproceedings{Jalaparti:2016:DPT:2934872.2934893,
 abstract = {Neither traffic engineering nor fixed prices (e.g., \$/GB) alone fully address the challenges of highly utilized inter-datacenter WANs. The former offers more service to users who overstate their demands and poor service overall. The latter offers no service guarantees to customers, and providers have no lever to steer customer demand to lightly loaded paths/times. To address these issues, we design and evaluate Pretium -- a framework that combines dynamic pricing with traffic engineering for inter-datacenter bandwidth. In Pretium, users specify their required rates or transfer sizes with deadlines, and a price module generates a price quote for different guarantees (promises) on these requests. The price quote is generated using internal prices (which can vary over time and links) which are maintained and periodically updated by Pretium based on history. A supplementary schedule adjustment module gears the agreed-upon network transfers towards an efficient operating point by optimizing time-varying operation costs. Experiments using traces from a large production WAN show that Pretium improves total system efficiency (value of routed transfers minus operation costs) by more than 3.5X relative to current usage-based pricing schemes, while increasing the provider profits by 2X.},
 acmid = {2934893},
 address = {New York, NY, USA},
 author = {Jalaparti, Virajith and Bliznets, Ivan and Kandula, Srikanth and Lucier, Brendan and Menache, Ishai},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934893},
 isbn = {978-1-4503-4193-6},
 keyword = {Inter-datacenter networks;, deadline scheduling, dynamic pricing;, percentile pricing;},
 link = {http://doi.acm.org/10.1145/2934872.2934893},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {73--86},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Dynamic Pricing and Traffic Engineering for Timely Inter-Datacenter Transfers},
 year = {2016}
}


@inproceedings{Fazzion:2016:ERI:2934872.2959052,
 abstract = {Routing events impact multiple paths in the Internet, but current active topology mapping techniques monitor paths independently. Detecting a routing event on one Internet path does not trigger any measurements on other possibly-impacted paths. This approach leads to outdated and inconsistent routing information. We characterize routing events in the Internet and investigate probing strategies to efficiently identify paths impacted by a routing event. Our results indicate that targeted probing can help us quickly remap routing events and maintain more up-to-date and consistent topology maps.},
 acmid = {2959052},
 address = {New York, NY, USA},
 author = {Fazzion, Elverton and Cunha, \'{I}talo and Guedes, Dorgival and Meira,Jr., Wagner and Teixeira, Renata and Veitch, Darryl and Diot, Christophe},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959052},
 isbn = {978-1-4503-4193-6},
 keyword = {Routing events, Topology mapping, Traceroute},
 link = {http://doi.acm.org/10.1145/2934872.2959052},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {565--566},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Efficient Remapping of Internet Routing Events},
 year = {2016}
}


@inproceedings{DeSilva:2016:NDN:2934872.2959055,
 abstract = {In this paper, we provide an initial evaluation of a home smart lighting system - demonstrating the advantages of ICN paradigm through the primitive features of NDN architecture. A prototype of NDN based smart home lighting was developed and benchmarked against the IP cloud based approach.},
 acmid = {2959055},
 address = {New York, NY, USA},
 author = {De Silva, Upeka and Lertsinsrubtavee, Adisorn and Sathiaseelan, Arjuna and Kanchanasut, Kanchana},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959055},
 isbn = {978-1-4503-4193-6},
 keyword = {Networks {\$\rightarrow\$} Home networks, Networks {\$\rightarrow\$} Network design principles, Networks {\$\rightarrow\$} Network protocol design},
 link = {http://doi.acm.org/10.1145/2934872.2959055},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {573--574},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Named Data Networking Based Smart Home Lighting},
 year = {2016}
}


@inproceedings{Shukla:2016:TTS:2934872.2959083,
 abstract = {Software-Defined Networks (SDNs) promise to overcome the often complex and error-prone operation of tradi- tional computer networks, by enabling programmabil- ity, automation and verifiability. Yet, SDNs also in- troduce new challenges, for example due to the asyn- chronous communication channel between the logically centralized control platform and the switches in the data plane. In particular, the asynchronous commu- nication of network update commands (e.g., OpenFlow FlowMod messages) may lead to transient inconsisten- cies, such as loops or bypassed waypoints (e.g., fire- walls). One approach to ensure transient consistency even in asynchronous environments is to employ smart scheduling algorithms: algorithms which update subsets of switches in each communication round only, where each subset in itself guarantees consistency. In this demo, we show how to change routing policies in a transiently consistent manner. We demonstrate two al- gorithms, namely, Wayup [5] and Peacock [4], which partition the network updates sent from SDN controller towards OpenFlow software switches into multiple rounds as per respective algorithms. Later, the barrier mes- sages are utilized to ensure reliable network updates.},
 acmid = {2959083},
 address = {New York, NY, USA},
 author = {Shukla, Apoorv and Schmid, Stefan and Feldmann, Anja and Ludwig, Arne and Dudycz, Szymon and Schuetze, Andre},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959083},
 isbn = {978-1-4503-4193-6},
 keyword = {Mininet, SDN},
 link = {http://doi.acm.org/10.1145/2934872.2959083},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {597--598},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Towards Transiently Secure Updates in Asynchronous SDNs},
 year = {2016}
}


@inproceedings{Hatonen:2016:OSW:2934872.2959071,
 abstract = {Wi-Fi networks were one of the first use-cases for Software-defined networking (SDN). However, to deploy a software-defined Wi-Fi network today, one has to rely on research prototypes with availability, documentation, hardware requirements, and scalability issues. To alleviate this situation, we demonstrate two simple techniques to bring SDN functionality to existing Wi-Fi networks and discuss their benefits and short-comings. Researchers can use our techniques to convert their existing Wi-Fi testbeds into software defined Wi-Fi testbeds. Our two techniques thus significantly lower the barrier-to-entry for deploying software-defined Wi-Fi networks.},
 acmid = {2959071},
 address = {New York, NY, USA},
 author = {H\"{a}t\"{o}nen, Seppo and Savolainen, Petri and Rao, Ashwin and Flinck, Hannu and Tarkoma, Sasu},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959071},
 isbn = {978-1-4503-4193-6},
 keyword = {SDN, Testbeds, Wi-fi},
 link = {http://doi.acm.org/10.1145/2934872.2959071},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {609--610},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Off-the-Shelf Software-defined Wi-Fi Networks},
 year = {2016}
}


@inproceedings{Liu:2016:SAV:2934872.2960425,
 abstract = {In this paper, we present the preliminary design and implementation of SDN-SAVI, an SDN application that enables SAVI functionalities in SDN networks. In this proposal, all the functionalities are implemented on the controller without modifying SDN switches. To enforce SAVI on packets in the data plane, the controller installs binding tables in switches using existing SDN techniques, such as OpenFlow. With SDN-SAVI, a network administrator can now enforce SAVI in her network by merely integrating a module on the controller, rather than purchasing SAVI-capable switches and replacing legacy ones.},
 acmid = {2960425},
 address = {New York, NY, USA},
 author = {Liu, Bingyang and Bi, Jun and Zhou, Yu},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2960425},
 isbn = {978-1-4503-4193-6},
 keyword = {SAVI, SDN},
 link = {http://doi.acm.org/10.1145/2934872.2960425},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {595--596},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Source Address Validation in Software Defined Networks},
 year = {2016}
}


@inproceedings{Chaviaras:2016:ARD:2934872.2959078,
 abstract = {Prefix hijacking is a common phenomenon in the Internet that often causes routing problems and economic losses. In this demo, we propose ARTEMIS, a tool that enables network administrators to detect and mitigate prefix hijacking incidents, against their own prefixes. ARTEMIS is based on the real-time monitoring of BGP data in the Internet, and software-defined networking (SDN) principles, and can completely mitigate a prefix hijacking within a few minutes (e.g., 5-6mins in our experiments) after it has been~launched.},
 acmid = {2959078},
 address = {New York, NY, USA},
 author = {Chaviaras, Gavriil and Gigis, Petros and Sermpezis, Pavlos and Dimitropoulos, Xenofontas},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959078},
 isbn = {978-1-4503-4193-6},
 keyword = {Network management, Network monitoring, Network security},
 link = {http://doi.acm.org/10.1145/2934872.2959078},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {625--626},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {ARTEMIS: Real-Time Detection and Automatic Mitigation for BGP Prefix Hijacking},
 year = {2016}
}


@inproceedings{Cronkite-Ratcliff:2016:VCC:2934872.2934889,
 abstract = {New congestion control algorithms are rapidly improving datacenters by reducing latency, overcoming incast, increasing throughput and improving fairness. Ideally, the operating system in every server and virtual machine is updated to support new congestion control algorithms. However, legacy applications often cannot be upgraded to a new operating system version, which means the advances are off-limits to them. Worse, as we show, legacy applications can be squeezed out, which in the worst case prevents the entire network from adopting new algorithms. Our goal is to make it easy to deploy new and improved congestion control algorithms into multitenant datacenters, without having to worry about TCP-friendliness with non-participating virtual machines. This paper presents a solution we call virtualized congestion control. The datacenter owner may introduce a new congestion control algorithm in the hypervisors. Internally, the hypervisors translate between the new congestion control algorithm and the old legacy congestion control, allowing legacy applications to enjoy the benefits of the new algorithm. We have implemented proof-of-concept systems for virtualized congestion control in the Linux kernel and in VMware’s ESXi hypervisor, achieving improved fairness, performance, and control over guest bandwidth allocations.},
 acmid = {2934889},
 address = {New York, NY, USA},
 author = {Cronkite-Ratcliff, Bryce and Bergman, Aran and Vargaftik, Shay and Ravi, Madhusudhan and McKeown, Nick and Abraham, Ittai and Keslassy, Isaac},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934889},
 isbn = {978-1-4503-4193-6},
 keyword = {DCTCP;, ECN;, TCP., Virtualized congestion control;, algorithmic virtualization;, datacenters;, hypervisors;},
 link = {http://doi.acm.org/10.1145/2934872.2934889},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {230--243},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Virtualized Congestion Control},
 year = {2016}
}


@inproceedings{Vasisht:2016:ECF:2934872.2934895,
 abstract = {This paper focuses on a simple, yet fundamental question: ``Can a node infer the wireless channels on one frequency band by observing the channels on a different frequency band?'' This question arises in cellular networks, where the uplink and the downlink operate on different frequencies. Addressing this question is critical for the deployment of key 5G solutions such as massive MIMO, multi-user MIMO, and distributed MIMO, which require channel state information. We introduce R2-F2, a system that enables LTE base stations to infer the downlink channels to a client by observing the uplink channels from that client. By doing so, R2-F2 extends the concept of reciprocity to LTE cellular networks, where downlink and uplink transmissions occur on different frequency bands. It also removes a major hurdle for the deployment of 5G MIMO solutions. We have implemented R2-F2 in software radios and integrated it within the LTE OFDM physical layer. Our results show that the channels computed by R2-F2 deliver accurate MIMO beamforming (to within 0.7~dB of beamforming gains with ground truth channels) while eliminating channel feedback overhead.},
 acmid = {2934895},
 address = {New York, NY, USA},
 author = {Vasisht, Deepak and Kumar, Swarun and Rahul, Hariharan and Katabi, Dina},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934895},
 isbn = {978-1-4503-4193-6},
 keyword = {LTE, FDD Systems},
 link = {http://doi.acm.org/10.1145/2934872.2934895},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {398--411},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Eliminating Channel Feedback in Next-Generation Cellular Networks},
 year = {2016}
}


@inproceedings{Cziva:2016:REV:2934872.2959067,
 abstract = {While the network edge is becoming more important for the provision of customized services in next generation mobile networks, current NFV architectures are unsuitable to meet the increasing future demand. They rely on commodity servers with resource-hungry Virtual Machines that are unable to provide the high network function density and mobility requirements necessary for upcoming wide-area and 5G networks. In this demo, we showcase Glasgow Network Functions (GNF), a virtualization framework suitable for next generation mobile networks that exploits lightweight network functions (NFs) deployed at the edge and transparently following  users' devices as they roam between cells.},
 acmid = {2959067},
 address = {New York, NY, USA},
 author = {Cziva, Richard and Jouet, Simon and Pezaros, Dimitrios P},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959067},
 isbn = {978-1-4503-4193-6},
 keyword = {container network functions, fifth-generation mobile networks, glasgow network functions, network function virtualization, software-defined networks},
 link = {http://doi.acm.org/10.1145/2934872.2959067},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {601--602},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Roaming Edge vNFs Using Glasgow Network Functions},
 year = {2016}
}


@inproceedings{Fontes:2016:MPH:2934872.2959070,
 abstract = {Software-Defined Wireless Networking (SDWN) is being considered an appealing paradigm to design and operate wireless networks through higher-level abstractions and programmatic interfaces such as the OpenFlow protocol. Identified benefits include cost savings, service velocity and customization, resource optimization through novel approaches to user mobility, traffic offloading, multi-layer and multi-path routing, and so on. This demonstration features Mininet-WiFi as a SDWN emulator with the ability to run realistic experiments in hybrid physical-virtual environments, where users attending the conference are able to experience first hand by connecting their devices and interacting with virtual WiFi stations in a wireless mesh network or reach the Internet through the emulated SDWN infrastructure. OpenFlow 1.3 metering and IP header re-writing actions will showcase HTTP flow redirection and rate limitation of real users' wireless traffic.},
 acmid = {2959070},
 address = {New York, NY, USA},
 author = {Fontes, Ramon dos Reis and Rothenberg, Christian Esteve},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959070},
 isbn = {978-1-4503-4193-6},
 keyword = {OpenFlow, SDN, SDWN, emulator, mesh network, wireless},
 link = {http://doi.acm.org/10.1145/2934872.2959070},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {607--608},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Mininet-WiFi: A Platform for Hybrid Physical-Virtual Software-Defined Wireless Networking Research},
 year = {2016}
}


@proceedings{Uhlig:2015:2785956,
 abstract = {Welcome to the 2015 ACM SIGCOMM Conference, and welcome to London! This year, a program committee of 49 networking researchers reviewed a total of 242 submissions. Reviewing was double-blind, and review assignment avoided conflicts of interest as defined in the submission instructions posted on the SIGCOMM 2015 web site. The PC's composition represented the breadth of the community: from industry and academia, with expertise across the range of topics within the field of networking. Roughly a third of the PC consisted of members serving for the first time. The PC included members of the EE communications research community whose work overlaps physical-layer topics of interest to SIGCOMM. The PC was augmented by 37 outside domain expert reviewers. The PC and the domain experts together wrote more than 1100 reviews over three rounds of reviewing. The PC met in person on April 23rd and 24th, 2015, in Redmond, Washington, to select the final program. During the one and a half-day PC meeting, the PC discussed 74 papers, each of which had received between 5 and 8 reviews; the result is this outstanding final program of 40 papers. A PC member shepherded every accepted paper to assist the authors in improving their work for the paper's camera-ready version. We share the PC's strong enthusiasm for the work appearing in the program, and hope that you enjoy reading the papers and hearing the presentations at the conference. We are particularly excited to introduce a new track, the Experience Track, to SIGCOMM this year. This track, as the CFP stated, is for "experience papers on the design, analysis, and evaluation of techniques in commercial or otherwise widely used deployment." Our aim in creating this track is for SIGCOMM to help extend the community's knowledge of how known techniques fare in realistic settings, and particularly in settings that most in the community cannot duplicate, for reasons of scale or otherwise. To allow the Best Paper Award to reflect not only the content of the camera-ready papers, but also the reception work receives from the community at the conference-particularly in questions and answers following a presentation-the SIGCOMM 2015 Best Paper Award will be decided at the conference, and will be announced at the start of the conference's third day. Papers with any authors in conflict with either PC chair are excluded from consideration for a Best Paper Award.},
 address = {New York, NY, USA},
 isbn = {978-1-4503-3542-3},
 location = {London, United Kingdom},
 publisher = {ACM},
 title = {SIGCOMM '15: Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication},
 year = {2015}
}


@inproceedings{Mace:2016:TFQ:2934872.2934878,
 abstract = {In many important cloud services, different tenants execute their requests in the thread pool of the same process, requiring fair sharing of resources. However, using fair queue schedulers to provide fairness in this context is difficult because of high execution concurrency, and because request costs are unknown and have high variance. Using fair schedulers like WFQ and WF²Q in such settings leads to bursty schedules, where large requests block small ones for long periods of time. In this paper, we propose Two-Dimensional Fair Queueing (2DFQ), which spreads requests of different costs across di erent threads and minimizes the impact of tenants with unpredictable requests. In evaluation on production workloads from Azure Storage, a large-scale cloud system at Microsoft, we show that 2DFQ reduces the burstiness of service by 1-2 orders of magnitude. On workloads where many large requests compete with small ones, 2DFQ improves 99th percentile latencies by up to 2 orders of magnitude.},
 acmid = {2934878},
 address = {New York, NY, USA},
 author = {Mace, Jonathan and Bodik, Peter and Musuvathi, Madanlal and Fonseca, Rodrigo and Varadarajan, Krishnan},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934878},
 isbn = {978-1-4503-4193-6},
 keyword = {Fair Request Scheduling, Multi-Tenant Systems},
 link = {http://doi.acm.org/10.1145/2934872.2934878},
 location = {Florianopolis, Brazil},
 numpages = {16},
 pages = {144--159},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {2DFQ: Two-Dimensional Fair Queuing for Multi-Tenant Cloud Services},
 year = {2016}
}


@inproceedings{Sivaraman:2016:PPS:2934872.2934899,
 abstract = {Switches today provide a small menu of scheduling algorithms. While we can tweak scheduling parameters, we cannot modify algorithmic logic, or add a completely new algorithm, after the switch has been designed. This paper presents a design for a {\em programmable} packet scheduler, which allows scheduling algorithms---potentially algorithms that are unknown today---to be programmed into a switch without requiring hardware redesign. Our design uses the property that scheduling algorithms make two decisions: in what order to schedule packets and when to schedule them. Further, we observe that in many scheduling algorithms, definitive decisions on these two questions can be made when packets are enqueued. We use these observations to build a programmable scheduler using a single abstraction: the push-in first-out queue (PIFO), a priority queue that maintains the scheduling order or time. We show that a PIFO-based scheduler lets us program a wide variety of scheduling algorithms. We present a hardware design for this scheduler for a 64-port 10 Gbit/s shared-memory (output-queued) switch. Our design costs an additional 4% in chip area. In return, it lets us program many sophisticated algorithms, such as a 5-level hierarchical scheduler with programmable decisions at each level.},
 acmid = {2934899},
 address = {New York, NY, USA},
 author = {Sivaraman, Anirudh and Subramanian, Suvinay and Alizadeh, Mohammad and Chole, Sharad and Chuang, Shang-Tse and Agrawal, Anurag and Balakrishnan, Hari and Edsall, Tom and Katti, Sachin and McKeown, Nick},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934899},
 isbn = {978-1-4503-4193-6},
 keyword = {Programmable scheduling, switch hardware},
 link = {http://doi.acm.org/10.1145/2934872.2934899},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {44--57},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Programmable Packet Scheduling at Line Rate},
 year = {2016}
}


@inproceedings{Choi:2016:AAF:2934872.2959049,
 abstract = {Minimizing response times for mobile applications is critical for quality user experience that often impacts the revenue of mobile services. Generalized approaches to accelerated mobile applications (e.g., TCP acceleration, SPDY, compression) are less effective because they do not take account for application specific behaviors. In contrast, application specific approaches build application-specific proxies by leveraging the app-specific protocol behaviors to enable dynamic caching and/or prefetching. However, this is non-trivial because it requires manual analysis of application level protocols and their interactions. Therefore, only a small number of apps enjoyed the benefit. This paper addresses the problem of scaling the number of applications by automating the process. To this end, we present a framework for mobile application acceleration that leverages automatic protocol analysis to automatically discover opportunities for app acceleration. The framework automatically finds out when and where to prefetch or perform dynamic caching. We present the framework design and a preliminary result that demonstrates its viability.},
 acmid = {2959049},
 address = {New York, NY, USA},
 author = {Choi, Byungkwon and Kim, Jeongmin and Han, Dongsu},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2959049},
 isbn = {978-1-4503-4193-6},
 keyword = {android, automatic proxying, protocol behavior, static analysis},
 link = {http://doi.acm.org/10.1145/2934872.2959049},
 location = {Florianopolis, Brazil},
 numpages = {2},
 pages = {559--560},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {Application-specific Acceleration Framework for Mobile Applications},
 year = {2016}
}


@inproceedings{Ghobadi:2016:PAR:2934872.2934911,
 abstract = {We explore a novel, free-space optics based approach for building data center interconnects. It uses a digital micromirror device (DMD) and mirror assembly combination as a transmitter and a photodetector on top of the rack as a receiver (Figure 1). Our approach enables all pairs of racks to establish direct links, and we can reconfigure such links (i.e., connect different rack pairs) within 12 us. To carry traffic from a source to a destination rack, transmitters and receivers in our interconnect can be dynamically linked in millions of ways. We develop topology construction and routing methods to exploit this flexibility, including a flow scheduling algorithm that is a constant factor approximation to the offline optimal solution. Experiments with a small prototype point to the feasibility of our approach. Simulations using realistic data center workloads show that, compared to the conventional folded-Clos interconnect, our approach can improve mean flow completion time by 30-95% and reduce cost by 25-40%.},
 acmid = {2934911},
 address = {New York, NY, USA},
 author = {Ghobadi, Monia and Mahajan, Ratul and Phanishayee, Amar and Devanur, Nikhil and Kulkarni, Janardhan and Ranade, Gireeja and Blanche, Pierre-Alexandre and Rastegarfar, Houman and Glick, Madeleine and Kilper, Daniel},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934911},
 isbn = {978-1-4503-4193-6},
 keyword = {Data Centers, Free-Space Optics, Reconfigurability},
 link = {http://doi.acm.org/10.1145/2934872.2934911},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {216--229},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {ProjecToR: Agile Reconfigurable Data Center Interconnect},
 year = {2016}
}


@inproceedings{Guo:2016:ROC:2934872.2934908,
 abstract = {Over the past one and half years, we have been using RDMA over commodity Ethernet (RoCEv2) to support some of Microsoft's highly-reliable, latency-sensitive services. This paper describes the challenges we encountered during the process and the solutions we devised to address them. In order to scale RoCEv2 beyond VLAN, we have designed a DSCP-based priority flow-control (PFC) mechanism to ensure large-scale deployment. We have addressed the safety challenges brought by PFC-induced deadlock (yes, it happened!), RDMA transport livelock, and the NIC PFC pause frame storm problem. We have also built the monitoring and management systems to make sure RDMA works as expected. Our experiences show that the safety and scalability issues of running RoCEv2 at scale can all be addressed, and RDMA can replace TCP for intra data center communications and achieve low latency, low CPU overhead, and high throughput.},
 acmid = {2934908},
 address = {New York, NY, USA},
 author = {Guo, Chuanxiong and Wu, Haitao and Deng, Zhong and Soni, Gaurav and Ye, Jianxi and Padhye, Jitu and Lipshteyn, Marina},
 booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
 doi = {10.1145/2934872.2934908},
 isbn = {978-1-4503-4193-6},
 keyword = {Deadlock, PFC, PFC propagation, RDMA, RoCEv2},
 link = {http://doi.acm.org/10.1145/2934872.2934908},
 location = {Florianopolis, Brazil},
 numpages = {14},
 pages = {202--215},
 publisher = {ACM},
 series = {SIGCOMM '16},
 title = {RDMA over Commodity Ethernet at Scale},
 year = {2016}
}


